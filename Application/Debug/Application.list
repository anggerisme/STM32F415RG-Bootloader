
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002874  08010190  08010190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08012a04  08012a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a70  08012a70  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08012a70  08012a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a78  08012a78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a78  08012a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012a7c  08012a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08012a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000078  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007875  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000130c  00000000  00000000  0002790f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000630  00000000  00000000  00028c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005b8  00000000  00000000  00029250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eda8  00000000  00000000  00029808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008003  00000000  00000000  000485b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9eaf  00000000  00000000  000505b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010a462  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bfc  00000000  00000000  0010a4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010190 <__do_global_dtors_aux>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4c05      	ldr	r4, [pc, #20]	; (80101a8 <__do_global_dtors_aux+0x18>)
 8010194:	7823      	ldrb	r3, [r4, #0]
 8010196:	b933      	cbnz	r3, 80101a6 <__do_global_dtors_aux+0x16>
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <__do_global_dtors_aux+0x1c>)
 801019a:	b113      	cbz	r3, 80101a2 <__do_global_dtors_aux+0x12>
 801019c:	4804      	ldr	r0, [pc, #16]	; (80101b0 <__do_global_dtors_aux+0x20>)
 801019e:	f3af 8000 	nop.w
 80101a2:	2301      	movs	r3, #1
 80101a4:	7023      	strb	r3, [r4, #0]
 80101a6:	bd10      	pop	{r4, pc}
 80101a8:	20000070 	.word	0x20000070
 80101ac:	00000000 	.word	0x00000000
 80101b0:	080129ec 	.word	0x080129ec

080101b4 <frame_dummy>:
 80101b4:	b508      	push	{r3, lr}
 80101b6:	4b03      	ldr	r3, [pc, #12]	; (80101c4 <frame_dummy+0x10>)
 80101b8:	b11b      	cbz	r3, 80101c2 <frame_dummy+0xe>
 80101ba:	4903      	ldr	r1, [pc, #12]	; (80101c8 <frame_dummy+0x14>)
 80101bc:	4803      	ldr	r0, [pc, #12]	; (80101cc <frame_dummy+0x18>)
 80101be:	f3af 8000 	nop.w
 80101c2:	bd08      	pop	{r3, pc}
 80101c4:	00000000 	.word	0x00000000
 80101c8:	20000074 	.word	0x20000074
 80101cc:	080129ec 	.word	0x080129ec

080101d0 <strlen>:
 80101d0:	4603      	mov	r3, r0
 80101d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	d1fb      	bne.n	80101d2 <strlen+0x2>
 80101da:	1a18      	subs	r0, r3, r0
 80101dc:	3801      	subs	r0, #1
 80101de:	4770      	bx	lr

080101e0 <memchr>:
 80101e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80101e4:	2a10      	cmp	r2, #16
 80101e6:	db2b      	blt.n	8010240 <memchr+0x60>
 80101e8:	f010 0f07 	tst.w	r0, #7
 80101ec:	d008      	beq.n	8010200 <memchr+0x20>
 80101ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101f2:	3a01      	subs	r2, #1
 80101f4:	428b      	cmp	r3, r1
 80101f6:	d02d      	beq.n	8010254 <memchr+0x74>
 80101f8:	f010 0f07 	tst.w	r0, #7
 80101fc:	b342      	cbz	r2, 8010250 <memchr+0x70>
 80101fe:	d1f6      	bne.n	80101ee <memchr+0xe>
 8010200:	b4f0      	push	{r4, r5, r6, r7}
 8010202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801020a:	f022 0407 	bic.w	r4, r2, #7
 801020e:	f07f 0700 	mvns.w	r7, #0
 8010212:	2300      	movs	r3, #0
 8010214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010218:	3c08      	subs	r4, #8
 801021a:	ea85 0501 	eor.w	r5, r5, r1
 801021e:	ea86 0601 	eor.w	r6, r6, r1
 8010222:	fa85 f547 	uadd8	r5, r5, r7
 8010226:	faa3 f587 	sel	r5, r3, r7
 801022a:	fa86 f647 	uadd8	r6, r6, r7
 801022e:	faa5 f687 	sel	r6, r5, r7
 8010232:	b98e      	cbnz	r6, 8010258 <memchr+0x78>
 8010234:	d1ee      	bne.n	8010214 <memchr+0x34>
 8010236:	bcf0      	pop	{r4, r5, r6, r7}
 8010238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801023c:	f002 0207 	and.w	r2, r2, #7
 8010240:	b132      	cbz	r2, 8010250 <memchr+0x70>
 8010242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010246:	3a01      	subs	r2, #1
 8010248:	ea83 0301 	eor.w	r3, r3, r1
 801024c:	b113      	cbz	r3, 8010254 <memchr+0x74>
 801024e:	d1f8      	bne.n	8010242 <memchr+0x62>
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr
 8010254:	3801      	subs	r0, #1
 8010256:	4770      	bx	lr
 8010258:	2d00      	cmp	r5, #0
 801025a:	bf06      	itte	eq
 801025c:	4635      	moveq	r5, r6
 801025e:	3803      	subeq	r0, #3
 8010260:	3807      	subne	r0, #7
 8010262:	f015 0f01 	tst.w	r5, #1
 8010266:	d107      	bne.n	8010278 <memchr+0x98>
 8010268:	3001      	adds	r0, #1
 801026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801026e:	bf02      	ittt	eq
 8010270:	3001      	addeq	r0, #1
 8010272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010276:	3001      	addeq	r0, #1
 8010278:	bcf0      	pop	{r4, r5, r6, r7}
 801027a:	3801      	subs	r0, #1
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <__aeabi_uldivmod>:
 8010280:	b953      	cbnz	r3, 8010298 <__aeabi_uldivmod+0x18>
 8010282:	b94a      	cbnz	r2, 8010298 <__aeabi_uldivmod+0x18>
 8010284:	2900      	cmp	r1, #0
 8010286:	bf08      	it	eq
 8010288:	2800      	cmpeq	r0, #0
 801028a:	bf1c      	itt	ne
 801028c:	f04f 31ff 	movne.w	r1, #4294967295
 8010290:	f04f 30ff 	movne.w	r0, #4294967295
 8010294:	f000 b974 	b.w	8010580 <__aeabi_idiv0>
 8010298:	f1ad 0c08 	sub.w	ip, sp, #8
 801029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80102a0:	f000 f806 	bl	80102b0 <__udivmoddi4>
 80102a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80102a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102ac:	b004      	add	sp, #16
 80102ae:	4770      	bx	lr

080102b0 <__udivmoddi4>:
 80102b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102b4:	9e08      	ldr	r6, [sp, #32]
 80102b6:	460d      	mov	r5, r1
 80102b8:	4604      	mov	r4, r0
 80102ba:	4688      	mov	r8, r1
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d14d      	bne.n	801035c <__udivmoddi4+0xac>
 80102c0:	428a      	cmp	r2, r1
 80102c2:	4694      	mov	ip, r2
 80102c4:	d968      	bls.n	8010398 <__udivmoddi4+0xe8>
 80102c6:	fab2 f282 	clz	r2, r2
 80102ca:	b152      	cbz	r2, 80102e2 <__udivmoddi4+0x32>
 80102cc:	fa01 f302 	lsl.w	r3, r1, r2
 80102d0:	f1c2 0120 	rsb	r1, r2, #32
 80102d4:	fa20 f101 	lsr.w	r1, r0, r1
 80102d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80102dc:	ea41 0803 	orr.w	r8, r1, r3
 80102e0:	4094      	lsls	r4, r2
 80102e2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80102e6:	0c21      	lsrs	r1, r4, #16
 80102e8:	fbb8 fef5 	udiv	lr, r8, r5
 80102ec:	fa1f f78c 	uxth.w	r7, ip
 80102f0:	fb05 831e 	mls	r3, r5, lr, r8
 80102f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80102f8:	fb0e f107 	mul.w	r1, lr, r7
 80102fc:	4299      	cmp	r1, r3
 80102fe:	d90b      	bls.n	8010318 <__udivmoddi4+0x68>
 8010300:	eb1c 0303 	adds.w	r3, ip, r3
 8010304:	f10e 30ff 	add.w	r0, lr, #4294967295
 8010308:	f080 811e 	bcs.w	8010548 <__udivmoddi4+0x298>
 801030c:	4299      	cmp	r1, r3
 801030e:	f240 811b 	bls.w	8010548 <__udivmoddi4+0x298>
 8010312:	f1ae 0e02 	sub.w	lr, lr, #2
 8010316:	4463      	add	r3, ip
 8010318:	1a5b      	subs	r3, r3, r1
 801031a:	b2a4      	uxth	r4, r4
 801031c:	fbb3 f0f5 	udiv	r0, r3, r5
 8010320:	fb05 3310 	mls	r3, r5, r0, r3
 8010324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010328:	fb00 f707 	mul.w	r7, r0, r7
 801032c:	42a7      	cmp	r7, r4
 801032e:	d90a      	bls.n	8010346 <__udivmoddi4+0x96>
 8010330:	eb1c 0404 	adds.w	r4, ip, r4
 8010334:	f100 33ff 	add.w	r3, r0, #4294967295
 8010338:	f080 8108 	bcs.w	801054c <__udivmoddi4+0x29c>
 801033c:	42a7      	cmp	r7, r4
 801033e:	f240 8105 	bls.w	801054c <__udivmoddi4+0x29c>
 8010342:	4464      	add	r4, ip
 8010344:	3802      	subs	r0, #2
 8010346:	1be4      	subs	r4, r4, r7
 8010348:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 801034c:	2100      	movs	r1, #0
 801034e:	b11e      	cbz	r6, 8010358 <__udivmoddi4+0xa8>
 8010350:	40d4      	lsrs	r4, r2
 8010352:	2300      	movs	r3, #0
 8010354:	e9c6 4300 	strd	r4, r3, [r6]
 8010358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801035c:	428b      	cmp	r3, r1
 801035e:	d908      	bls.n	8010372 <__udivmoddi4+0xc2>
 8010360:	2e00      	cmp	r6, #0
 8010362:	f000 80ee 	beq.w	8010542 <__udivmoddi4+0x292>
 8010366:	2100      	movs	r1, #0
 8010368:	e9c6 0500 	strd	r0, r5, [r6]
 801036c:	4608      	mov	r0, r1
 801036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010372:	fab3 f183 	clz	r1, r3
 8010376:	2900      	cmp	r1, #0
 8010378:	d14a      	bne.n	8010410 <__udivmoddi4+0x160>
 801037a:	42ab      	cmp	r3, r5
 801037c:	d302      	bcc.n	8010384 <__udivmoddi4+0xd4>
 801037e:	4282      	cmp	r2, r0
 8010380:	f200 80f9 	bhi.w	8010576 <__udivmoddi4+0x2c6>
 8010384:	1a84      	subs	r4, r0, r2
 8010386:	eb65 0303 	sbc.w	r3, r5, r3
 801038a:	2001      	movs	r0, #1
 801038c:	4698      	mov	r8, r3
 801038e:	2e00      	cmp	r6, #0
 8010390:	d0e2      	beq.n	8010358 <__udivmoddi4+0xa8>
 8010392:	e9c6 4800 	strd	r4, r8, [r6]
 8010396:	e7df      	b.n	8010358 <__udivmoddi4+0xa8>
 8010398:	b902      	cbnz	r2, 801039c <__udivmoddi4+0xec>
 801039a:	deff      	udf	#255	; 0xff
 801039c:	fab2 f282 	clz	r2, r2
 80103a0:	2a00      	cmp	r2, #0
 80103a2:	f040 8091 	bne.w	80104c8 <__udivmoddi4+0x218>
 80103a6:	eba1 050c 	sub.w	r5, r1, ip
 80103aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80103ae:	fa1f fe8c 	uxth.w	lr, ip
 80103b2:	2101      	movs	r1, #1
 80103b4:	fbb5 f3f7 	udiv	r3, r5, r7
 80103b8:	fb07 5013 	mls	r0, r7, r3, r5
 80103bc:	0c25      	lsrs	r5, r4, #16
 80103be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80103c2:	fb0e f003 	mul.w	r0, lr, r3
 80103c6:	42a8      	cmp	r0, r5
 80103c8:	d908      	bls.n	80103dc <__udivmoddi4+0x12c>
 80103ca:	eb1c 0505 	adds.w	r5, ip, r5
 80103ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80103d2:	d202      	bcs.n	80103da <__udivmoddi4+0x12a>
 80103d4:	42a8      	cmp	r0, r5
 80103d6:	f200 80cb 	bhi.w	8010570 <__udivmoddi4+0x2c0>
 80103da:	4643      	mov	r3, r8
 80103dc:	1a2d      	subs	r5, r5, r0
 80103de:	b2a4      	uxth	r4, r4
 80103e0:	fbb5 f0f7 	udiv	r0, r5, r7
 80103e4:	fb07 5510 	mls	r5, r7, r0, r5
 80103e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80103ec:	fb0e fe00 	mul.w	lr, lr, r0
 80103f0:	45a6      	cmp	lr, r4
 80103f2:	d908      	bls.n	8010406 <__udivmoddi4+0x156>
 80103f4:	eb1c 0404 	adds.w	r4, ip, r4
 80103f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80103fc:	d202      	bcs.n	8010404 <__udivmoddi4+0x154>
 80103fe:	45a6      	cmp	lr, r4
 8010400:	f200 80bb 	bhi.w	801057a <__udivmoddi4+0x2ca>
 8010404:	4628      	mov	r0, r5
 8010406:	eba4 040e 	sub.w	r4, r4, lr
 801040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 801040e:	e79e      	b.n	801034e <__udivmoddi4+0x9e>
 8010410:	f1c1 0720 	rsb	r7, r1, #32
 8010414:	408b      	lsls	r3, r1
 8010416:	fa22 fc07 	lsr.w	ip, r2, r7
 801041a:	ea4c 0c03 	orr.w	ip, ip, r3
 801041e:	fa20 f407 	lsr.w	r4, r0, r7
 8010422:	fa05 f301 	lsl.w	r3, r5, r1
 8010426:	431c      	orrs	r4, r3
 8010428:	40fd      	lsrs	r5, r7
 801042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 801042e:	fa00 f301 	lsl.w	r3, r0, r1
 8010432:	fbb5 f8f9 	udiv	r8, r5, r9
 8010436:	0c20      	lsrs	r0, r4, #16
 8010438:	fa1f fe8c 	uxth.w	lr, ip
 801043c:	fb09 5518 	mls	r5, r9, r8, r5
 8010440:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8010444:	fb08 f00e 	mul.w	r0, r8, lr
 8010448:	42a8      	cmp	r0, r5
 801044a:	fa02 f201 	lsl.w	r2, r2, r1
 801044e:	d90b      	bls.n	8010468 <__udivmoddi4+0x1b8>
 8010450:	eb1c 0505 	adds.w	r5, ip, r5
 8010454:	f108 3aff 	add.w	sl, r8, #4294967295
 8010458:	f080 8088 	bcs.w	801056c <__udivmoddi4+0x2bc>
 801045c:	42a8      	cmp	r0, r5
 801045e:	f240 8085 	bls.w	801056c <__udivmoddi4+0x2bc>
 8010462:	f1a8 0802 	sub.w	r8, r8, #2
 8010466:	4465      	add	r5, ip
 8010468:	1a2d      	subs	r5, r5, r0
 801046a:	b2a4      	uxth	r4, r4
 801046c:	fbb5 f0f9 	udiv	r0, r5, r9
 8010470:	fb09 5510 	mls	r5, r9, r0, r5
 8010474:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8010478:	fb00 fe0e 	mul.w	lr, r0, lr
 801047c:	45ae      	cmp	lr, r5
 801047e:	d908      	bls.n	8010492 <__udivmoddi4+0x1e2>
 8010480:	eb1c 0505 	adds.w	r5, ip, r5
 8010484:	f100 34ff 	add.w	r4, r0, #4294967295
 8010488:	d26c      	bcs.n	8010564 <__udivmoddi4+0x2b4>
 801048a:	45ae      	cmp	lr, r5
 801048c:	d96a      	bls.n	8010564 <__udivmoddi4+0x2b4>
 801048e:	3802      	subs	r0, #2
 8010490:	4465      	add	r5, ip
 8010492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010496:	fba0 9402 	umull	r9, r4, r0, r2
 801049a:	eba5 050e 	sub.w	r5, r5, lr
 801049e:	42a5      	cmp	r5, r4
 80104a0:	46c8      	mov	r8, r9
 80104a2:	46a6      	mov	lr, r4
 80104a4:	d356      	bcc.n	8010554 <__udivmoddi4+0x2a4>
 80104a6:	d053      	beq.n	8010550 <__udivmoddi4+0x2a0>
 80104a8:	b15e      	cbz	r6, 80104c2 <__udivmoddi4+0x212>
 80104aa:	ebb3 0208 	subs.w	r2, r3, r8
 80104ae:	eb65 050e 	sbc.w	r5, r5, lr
 80104b2:	fa05 f707 	lsl.w	r7, r5, r7
 80104b6:	fa22 f301 	lsr.w	r3, r2, r1
 80104ba:	40cd      	lsrs	r5, r1
 80104bc:	431f      	orrs	r7, r3
 80104be:	e9c6 7500 	strd	r7, r5, [r6]
 80104c2:	2100      	movs	r1, #0
 80104c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104c8:	f1c2 0320 	rsb	r3, r2, #32
 80104cc:	fa20 f103 	lsr.w	r1, r0, r3
 80104d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80104d4:	fa25 f303 	lsr.w	r3, r5, r3
 80104d8:	4095      	lsls	r5, r2
 80104da:	430d      	orrs	r5, r1
 80104dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80104e0:	fa1f fe8c 	uxth.w	lr, ip
 80104e4:	fbb3 f1f7 	udiv	r1, r3, r7
 80104e8:	fb07 3011 	mls	r0, r7, r1, r3
 80104ec:	0c2b      	lsrs	r3, r5, #16
 80104ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80104f2:	fb01 f00e 	mul.w	r0, r1, lr
 80104f6:	4298      	cmp	r0, r3
 80104f8:	fa04 f402 	lsl.w	r4, r4, r2
 80104fc:	d908      	bls.n	8010510 <__udivmoddi4+0x260>
 80104fe:	eb1c 0303 	adds.w	r3, ip, r3
 8010502:	f101 38ff 	add.w	r8, r1, #4294967295
 8010506:	d22f      	bcs.n	8010568 <__udivmoddi4+0x2b8>
 8010508:	4298      	cmp	r0, r3
 801050a:	d92d      	bls.n	8010568 <__udivmoddi4+0x2b8>
 801050c:	3902      	subs	r1, #2
 801050e:	4463      	add	r3, ip
 8010510:	1a1b      	subs	r3, r3, r0
 8010512:	b2ad      	uxth	r5, r5
 8010514:	fbb3 f0f7 	udiv	r0, r3, r7
 8010518:	fb07 3310 	mls	r3, r7, r0, r3
 801051c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8010520:	fb00 f30e 	mul.w	r3, r0, lr
 8010524:	42ab      	cmp	r3, r5
 8010526:	d908      	bls.n	801053a <__udivmoddi4+0x28a>
 8010528:	eb1c 0505 	adds.w	r5, ip, r5
 801052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8010530:	d216      	bcs.n	8010560 <__udivmoddi4+0x2b0>
 8010532:	42ab      	cmp	r3, r5
 8010534:	d914      	bls.n	8010560 <__udivmoddi4+0x2b0>
 8010536:	3802      	subs	r0, #2
 8010538:	4465      	add	r5, ip
 801053a:	1aed      	subs	r5, r5, r3
 801053c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8010540:	e738      	b.n	80103b4 <__udivmoddi4+0x104>
 8010542:	4631      	mov	r1, r6
 8010544:	4630      	mov	r0, r6
 8010546:	e707      	b.n	8010358 <__udivmoddi4+0xa8>
 8010548:	4686      	mov	lr, r0
 801054a:	e6e5      	b.n	8010318 <__udivmoddi4+0x68>
 801054c:	4618      	mov	r0, r3
 801054e:	e6fa      	b.n	8010346 <__udivmoddi4+0x96>
 8010550:	454b      	cmp	r3, r9
 8010552:	d2a9      	bcs.n	80104a8 <__udivmoddi4+0x1f8>
 8010554:	ebb9 0802 	subs.w	r8, r9, r2
 8010558:	eb64 0e0c 	sbc.w	lr, r4, ip
 801055c:	3801      	subs	r0, #1
 801055e:	e7a3      	b.n	80104a8 <__udivmoddi4+0x1f8>
 8010560:	4640      	mov	r0, r8
 8010562:	e7ea      	b.n	801053a <__udivmoddi4+0x28a>
 8010564:	4620      	mov	r0, r4
 8010566:	e794      	b.n	8010492 <__udivmoddi4+0x1e2>
 8010568:	4641      	mov	r1, r8
 801056a:	e7d1      	b.n	8010510 <__udivmoddi4+0x260>
 801056c:	46d0      	mov	r8, sl
 801056e:	e77b      	b.n	8010468 <__udivmoddi4+0x1b8>
 8010570:	3b02      	subs	r3, #2
 8010572:	4465      	add	r5, ip
 8010574:	e732      	b.n	80103dc <__udivmoddi4+0x12c>
 8010576:	4608      	mov	r0, r1
 8010578:	e709      	b.n	801038e <__udivmoddi4+0xde>
 801057a:	4464      	add	r4, ip
 801057c:	3802      	subs	r0, #2
 801057e:	e742      	b.n	8010406 <__udivmoddi4+0x156>

08010580 <__aeabi_idiv0>:
 8010580:	4770      	bx	lr
 8010582:	bf00      	nop

08010584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010588:	f000 fa4a 	bl	8010a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801058c:	f000 f82c 	bl	80105e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010590:	f000 f8b2 	bl	80106f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8010594:	f000 f886 	bl	80106a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  print_msg("\n\nWelcome to User Application\r\n");
 8010598:	4811      	ldr	r0, [pc, #68]	; (80105e0 <main+0x5c>)
 801059a:	f000 f915 	bl	80107c8 <print_msg>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);/*Red*/
 801059e:	2200      	movs	r2, #0
 80105a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80105a4:	480f      	ldr	r0, [pc, #60]	; (80105e4 <main+0x60>)
 80105a6:	f000 fd4b 	bl	8011040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80105aa:	2201      	movs	r2, #1
 80105ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80105b0:	480c      	ldr	r0, [pc, #48]	; (80105e4 <main+0x60>)
 80105b2:	f000 fd45 	bl	8011040 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80105b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80105ba:	f000 fa9f 	bl	8010afc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET); /*Yellow*/
 80105be:	2201      	movs	r2, #1
 80105c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80105c4:	4807      	ldr	r0, [pc, #28]	; (80105e4 <main+0x60>)
 80105c6:	f000 fd3b 	bl	8011040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80105ca:	2200      	movs	r2, #0
 80105cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80105d0:	4804      	ldr	r0, [pc, #16]	; (80105e4 <main+0x60>)
 80105d2:	f000 fd35 	bl	8011040 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80105d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80105da:	f000 fa8f 	bl	8010afc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);/*Red*/
 80105de:	e7de      	b.n	801059e <main+0x1a>
 80105e0:	08012a04 	.word	0x08012a04
 80105e4:	40020800 	.word	0x40020800

080105e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b094      	sub	sp, #80	; 0x50
 80105ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80105ee:	f107 0320 	add.w	r3, r7, #32
 80105f2:	2230      	movs	r2, #48	; 0x30
 80105f4:	2100      	movs	r1, #0
 80105f6:	4618      	mov	r0, r3
 80105f8:	f001 fd84 	bl	8012104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80105fc:	f107 030c 	add.w	r3, r7, #12
 8010600:	2200      	movs	r2, #0
 8010602:	601a      	str	r2, [r3, #0]
 8010604:	605a      	str	r2, [r3, #4]
 8010606:	609a      	str	r2, [r3, #8]
 8010608:	60da      	str	r2, [r3, #12]
 801060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801060c:	2300      	movs	r3, #0
 801060e:	60bb      	str	r3, [r7, #8]
 8010610:	4b22      	ldr	r3, [pc, #136]	; (801069c <SystemClock_Config+0xb4>)
 8010612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010614:	4a21      	ldr	r2, [pc, #132]	; (801069c <SystemClock_Config+0xb4>)
 8010616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801061a:	6413      	str	r3, [r2, #64]	; 0x40
 801061c:	4b1f      	ldr	r3, [pc, #124]	; (801069c <SystemClock_Config+0xb4>)
 801061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010624:	60bb      	str	r3, [r7, #8]
 8010626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010628:	2300      	movs	r3, #0
 801062a:	607b      	str	r3, [r7, #4]
 801062c:	4b1c      	ldr	r3, [pc, #112]	; (80106a0 <SystemClock_Config+0xb8>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	4a1b      	ldr	r2, [pc, #108]	; (80106a0 <SystemClock_Config+0xb8>)
 8010632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010636:	6013      	str	r3, [r2, #0]
 8010638:	4b19      	ldr	r3, [pc, #100]	; (80106a0 <SystemClock_Config+0xb8>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010640:	607b      	str	r3, [r7, #4]
 8010642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010644:	2302      	movs	r3, #2
 8010646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010648:	2301      	movs	r3, #1
 801064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801064c:	2310      	movs	r3, #16
 801064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8010650:	2300      	movs	r3, #0
 8010652:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010654:	f107 0320 	add.w	r3, r7, #32
 8010658:	4618      	mov	r0, r3
 801065a:	f000 fd09 	bl	8011070 <HAL_RCC_OscConfig>
 801065e:	4603      	mov	r3, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d001      	beq.n	8010668 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8010664:	f000 f8d2 	bl	801080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010668:	230f      	movs	r3, #15
 801066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 801066c:	2300      	movs	r3, #0
 801066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010670:	2300      	movs	r3, #0
 8010672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010674:	2300      	movs	r3, #0
 8010676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010678:	2300      	movs	r3, #0
 801067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 801067c:	f107 030c 	add.w	r3, r7, #12
 8010680:	2100      	movs	r1, #0
 8010682:	4618      	mov	r0, r3
 8010684:	f000 ff6c 	bl	8011560 <HAL_RCC_ClockConfig>
 8010688:	4603      	mov	r3, r0
 801068a:	2b00      	cmp	r3, #0
 801068c:	d001      	beq.n	8010692 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 801068e:	f000 f8bd 	bl	801080c <Error_Handler>
  }
}
 8010692:	bf00      	nop
 8010694:	3750      	adds	r7, #80	; 0x50
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
 801069a:	bf00      	nop
 801069c:	40023800 	.word	0x40023800
 80106a0:	40007000 	.word	0x40007000

080106a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80106a8:	4b11      	ldr	r3, [pc, #68]	; (80106f0 <MX_USART2_UART_Init+0x4c>)
 80106aa:	4a12      	ldr	r2, [pc, #72]	; (80106f4 <MX_USART2_UART_Init+0x50>)
 80106ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80106ae:	4b10      	ldr	r3, [pc, #64]	; (80106f0 <MX_USART2_UART_Init+0x4c>)
 80106b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80106b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80106b6:	4b0e      	ldr	r3, [pc, #56]	; (80106f0 <MX_USART2_UART_Init+0x4c>)
 80106b8:	2200      	movs	r2, #0
 80106ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80106bc:	4b0c      	ldr	r3, [pc, #48]	; (80106f0 <MX_USART2_UART_Init+0x4c>)
 80106be:	2200      	movs	r2, #0
 80106c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80106c2:	4b0b      	ldr	r3, [pc, #44]	; (80106f0 <MX_USART2_UART_Init+0x4c>)
 80106c4:	2200      	movs	r2, #0
 80106c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80106c8:	4b09      	ldr	r3, [pc, #36]	; (80106f0 <MX_USART2_UART_Init+0x4c>)
 80106ca:	220c      	movs	r2, #12
 80106cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80106ce:	4b08      	ldr	r3, [pc, #32]	; (80106f0 <MX_USART2_UART_Init+0x4c>)
 80106d0:	2200      	movs	r2, #0
 80106d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80106d4:	4b06      	ldr	r3, [pc, #24]	; (80106f0 <MX_USART2_UART_Init+0x4c>)
 80106d6:	2200      	movs	r2, #0
 80106d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80106da:	4805      	ldr	r0, [pc, #20]	; (80106f0 <MX_USART2_UART_Init+0x4c>)
 80106dc:	f001 f91e 	bl	801191c <HAL_UART_Init>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d001      	beq.n	80106ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80106e6:	f000 f891 	bl	801080c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80106ea:	bf00      	nop
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	2000008c 	.word	0x2000008c
 80106f4:	40004400 	.word	0x40004400

080106f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b088      	sub	sp, #32
 80106fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80106fe:	f107 030c 	add.w	r3, r7, #12
 8010702:	2200      	movs	r2, #0
 8010704:	601a      	str	r2, [r3, #0]
 8010706:	605a      	str	r2, [r3, #4]
 8010708:	609a      	str	r2, [r3, #8]
 801070a:	60da      	str	r2, [r3, #12]
 801070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801070e:	2300      	movs	r3, #0
 8010710:	60bb      	str	r3, [r7, #8]
 8010712:	4b2a      	ldr	r3, [pc, #168]	; (80107bc <MX_GPIO_Init+0xc4>)
 8010714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010716:	4a29      	ldr	r2, [pc, #164]	; (80107bc <MX_GPIO_Init+0xc4>)
 8010718:	f043 0304 	orr.w	r3, r3, #4
 801071c:	6313      	str	r3, [r2, #48]	; 0x30
 801071e:	4b27      	ldr	r3, [pc, #156]	; (80107bc <MX_GPIO_Init+0xc4>)
 8010720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010722:	f003 0304 	and.w	r3, r3, #4
 8010726:	60bb      	str	r3, [r7, #8]
 8010728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801072a:	2300      	movs	r3, #0
 801072c:	607b      	str	r3, [r7, #4]
 801072e:	4b23      	ldr	r3, [pc, #140]	; (80107bc <MX_GPIO_Init+0xc4>)
 8010730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010732:	4a22      	ldr	r2, [pc, #136]	; (80107bc <MX_GPIO_Init+0xc4>)
 8010734:	f043 0301 	orr.w	r3, r3, #1
 8010738:	6313      	str	r3, [r2, #48]	; 0x30
 801073a:	4b20      	ldr	r3, [pc, #128]	; (80107bc <MX_GPIO_Init+0xc4>)
 801073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801073e:	f003 0301 	and.w	r3, r3, #1
 8010742:	607b      	str	r3, [r7, #4]
 8010744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010746:	2300      	movs	r3, #0
 8010748:	603b      	str	r3, [r7, #0]
 801074a:	4b1c      	ldr	r3, [pc, #112]	; (80107bc <MX_GPIO_Init+0xc4>)
 801074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801074e:	4a1b      	ldr	r2, [pc, #108]	; (80107bc <MX_GPIO_Init+0xc4>)
 8010750:	f043 0302 	orr.w	r3, r3, #2
 8010754:	6313      	str	r3, [r2, #48]	; 0x30
 8010756:	4b19      	ldr	r3, [pc, #100]	; (80107bc <MX_GPIO_Init+0xc4>)
 8010758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801075a:	f003 0302 	and.w	r3, r3, #2
 801075e:	603b      	str	r3, [r7, #0]
 8010760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8010762:	2200      	movs	r2, #0
 8010764:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 8010768:	4815      	ldr	r0, [pc, #84]	; (80107c0 <MX_GPIO_Init+0xc8>)
 801076a:	f000 fc69 	bl	8011040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 801076e:	2200      	movs	r2, #0
 8010770:	2101      	movs	r1, #1
 8010772:	4814      	ldr	r0, [pc, #80]	; (80107c4 <MX_GPIO_Init+0xcc>)
 8010774:	f000 fc64 	bl	8011040 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_12;
 8010778:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 801077c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801077e:	2301      	movs	r3, #1
 8010780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010782:	2300      	movs	r3, #0
 8010784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010786:	2300      	movs	r3, #0
 8010788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801078a:	f107 030c 	add.w	r3, r7, #12
 801078e:	4619      	mov	r1, r3
 8010790:	480b      	ldr	r0, [pc, #44]	; (80107c0 <MX_GPIO_Init+0xc8>)
 8010792:	f000 fabb 	bl	8010d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8010796:	2301      	movs	r3, #1
 8010798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801079a:	2301      	movs	r3, #1
 801079c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801079e:	2300      	movs	r3, #0
 80107a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107a2:	2300      	movs	r3, #0
 80107a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80107a6:	f107 030c 	add.w	r3, r7, #12
 80107aa:	4619      	mov	r1, r3
 80107ac:	4805      	ldr	r0, [pc, #20]	; (80107c4 <MX_GPIO_Init+0xcc>)
 80107ae:	f000 faad 	bl	8010d0c <HAL_GPIO_Init>

}
 80107b2:	bf00      	nop
 80107b4:	3720      	adds	r7, #32
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	bf00      	nop
 80107bc:	40023800 	.word	0x40023800
 80107c0:	40020800 	.word	0x40020800
 80107c4:	40020400 	.word	0x40020400

080107c8 <print_msg>:

/* USER CODE BEGIN 4 */

void print_msg(char *format, ...){
 80107c8:	b40f      	push	{r0, r1, r2, r3}
 80107ca:	b580      	push	{r7, lr}
 80107cc:	b09a      	sub	sp, #104	; 0x68
 80107ce:	af00      	add	r7, sp, #0
    char str[100];

    /*Etract the argument list using VA apis*/
    va_list args;
    va_start(args, format);
 80107d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80107d4:	603b      	str	r3, [r7, #0]
    vsprintf(str, format, args);
 80107d6:	1d3b      	adds	r3, r7, #4
 80107d8:	683a      	ldr	r2, [r7, #0]
 80107da:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80107dc:	4618      	mov	r0, r3
 80107de:	f001 fcaf 	bl	8012140 <vsiprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80107e2:	1d3b      	adds	r3, r7, #4
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7ff fcf3 	bl	80101d0 <strlen>
 80107ea:	4603      	mov	r3, r0
 80107ec:	b29a      	uxth	r2, r3
 80107ee:	1d39      	adds	r1, r7, #4
 80107f0:	f04f 33ff 	mov.w	r3, #4294967295
 80107f4:	4804      	ldr	r0, [pc, #16]	; (8010808 <print_msg+0x40>)
 80107f6:	f001 f8de 	bl	80119b6 <HAL_UART_Transmit>
    va_end(args);
}
 80107fa:	bf00      	nop
 80107fc:	3768      	adds	r7, #104	; 0x68
 80107fe:	46bd      	mov	sp, r7
 8010800:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010804:	b004      	add	sp, #16
 8010806:	4770      	bx	lr
 8010808:	2000008c 	.word	0x2000008c

0801080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801080c:	b480      	push	{r7}
 801080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010810:	b672      	cpsid	i
}
 8010812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8010814:	e7fe      	b.n	8010814 <Error_Handler+0x8>
	...

08010818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801081e:	2300      	movs	r3, #0
 8010820:	607b      	str	r3, [r7, #4]
 8010822:	4b0f      	ldr	r3, [pc, #60]	; (8010860 <HAL_MspInit+0x48>)
 8010824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010826:	4a0e      	ldr	r2, [pc, #56]	; (8010860 <HAL_MspInit+0x48>)
 8010828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801082c:	6453      	str	r3, [r2, #68]	; 0x44
 801082e:	4b0c      	ldr	r3, [pc, #48]	; (8010860 <HAL_MspInit+0x48>)
 8010830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010836:	607b      	str	r3, [r7, #4]
 8010838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801083a:	2300      	movs	r3, #0
 801083c:	603b      	str	r3, [r7, #0]
 801083e:	4b08      	ldr	r3, [pc, #32]	; (8010860 <HAL_MspInit+0x48>)
 8010840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010842:	4a07      	ldr	r2, [pc, #28]	; (8010860 <HAL_MspInit+0x48>)
 8010844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010848:	6413      	str	r3, [r2, #64]	; 0x40
 801084a:	4b05      	ldr	r3, [pc, #20]	; (8010860 <HAL_MspInit+0x48>)
 801084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010852:	603b      	str	r3, [r7, #0]
 8010854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010856:	bf00      	nop
 8010858:	370c      	adds	r7, #12
 801085a:	46bd      	mov	sp, r7
 801085c:	bc80      	pop	{r7}
 801085e:	4770      	bx	lr
 8010860:	40023800 	.word	0x40023800

08010864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b08a      	sub	sp, #40	; 0x28
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801086c:	f107 0314 	add.w	r3, r7, #20
 8010870:	2200      	movs	r2, #0
 8010872:	601a      	str	r2, [r3, #0]
 8010874:	605a      	str	r2, [r3, #4]
 8010876:	609a      	str	r2, [r3, #8]
 8010878:	60da      	str	r2, [r3, #12]
 801087a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	4a19      	ldr	r2, [pc, #100]	; (80108e8 <HAL_UART_MspInit+0x84>)
 8010882:	4293      	cmp	r3, r2
 8010884:	d12b      	bne.n	80108de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8010886:	2300      	movs	r3, #0
 8010888:	613b      	str	r3, [r7, #16]
 801088a:	4b18      	ldr	r3, [pc, #96]	; (80108ec <HAL_UART_MspInit+0x88>)
 801088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801088e:	4a17      	ldr	r2, [pc, #92]	; (80108ec <HAL_UART_MspInit+0x88>)
 8010890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010894:	6413      	str	r3, [r2, #64]	; 0x40
 8010896:	4b15      	ldr	r3, [pc, #84]	; (80108ec <HAL_UART_MspInit+0x88>)
 8010898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801089a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801089e:	613b      	str	r3, [r7, #16]
 80108a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80108a2:	2300      	movs	r3, #0
 80108a4:	60fb      	str	r3, [r7, #12]
 80108a6:	4b11      	ldr	r3, [pc, #68]	; (80108ec <HAL_UART_MspInit+0x88>)
 80108a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108aa:	4a10      	ldr	r2, [pc, #64]	; (80108ec <HAL_UART_MspInit+0x88>)
 80108ac:	f043 0301 	orr.w	r3, r3, #1
 80108b0:	6313      	str	r3, [r2, #48]	; 0x30
 80108b2:	4b0e      	ldr	r3, [pc, #56]	; (80108ec <HAL_UART_MspInit+0x88>)
 80108b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108b6:	f003 0301 	and.w	r3, r3, #1
 80108ba:	60fb      	str	r3, [r7, #12]
 80108bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80108be:	230c      	movs	r3, #12
 80108c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108c2:	2302      	movs	r3, #2
 80108c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108c6:	2300      	movs	r3, #0
 80108c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80108ca:	2303      	movs	r3, #3
 80108cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80108ce:	2307      	movs	r3, #7
 80108d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80108d2:	f107 0314 	add.w	r3, r7, #20
 80108d6:	4619      	mov	r1, r3
 80108d8:	4805      	ldr	r0, [pc, #20]	; (80108f0 <HAL_UART_MspInit+0x8c>)
 80108da:	f000 fa17 	bl	8010d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80108de:	bf00      	nop
 80108e0:	3728      	adds	r7, #40	; 0x28
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	40004400 	.word	0x40004400
 80108ec:	40023800 	.word	0x40023800
 80108f0:	40020000 	.word	0x40020000

080108f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80108f4:	b480      	push	{r7}
 80108f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80108f8:	e7fe      	b.n	80108f8 <NMI_Handler+0x4>

080108fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80108fa:	b480      	push	{r7}
 80108fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80108fe:	e7fe      	b.n	80108fe <HardFault_Handler+0x4>

08010900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010900:	b480      	push	{r7}
 8010902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010904:	e7fe      	b.n	8010904 <MemManage_Handler+0x4>

08010906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010906:	b480      	push	{r7}
 8010908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801090a:	e7fe      	b.n	801090a <BusFault_Handler+0x4>

0801090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801090c:	b480      	push	{r7}
 801090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010910:	e7fe      	b.n	8010910 <UsageFault_Handler+0x4>

08010912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010912:	b480      	push	{r7}
 8010914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010916:	bf00      	nop
 8010918:	46bd      	mov	sp, r7
 801091a:	bc80      	pop	{r7}
 801091c:	4770      	bx	lr

0801091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801091e:	b480      	push	{r7}
 8010920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010922:	bf00      	nop
 8010924:	46bd      	mov	sp, r7
 8010926:	bc80      	pop	{r7}
 8010928:	4770      	bx	lr

0801092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801092a:	b480      	push	{r7}
 801092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801092e:	bf00      	nop
 8010930:	46bd      	mov	sp, r7
 8010932:	bc80      	pop	{r7}
 8010934:	4770      	bx	lr

08010936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010936:	b580      	push	{r7, lr}
 8010938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801093a:	f000 f8c3 	bl	8010ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801093e:	bf00      	nop
 8010940:	bd80      	pop	{r7, pc}
	...

08010944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b086      	sub	sp, #24
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801094c:	4a14      	ldr	r2, [pc, #80]	; (80109a0 <_sbrk+0x5c>)
 801094e:	4b15      	ldr	r3, [pc, #84]	; (80109a4 <_sbrk+0x60>)
 8010950:	1ad3      	subs	r3, r2, r3
 8010952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010958:	4b13      	ldr	r3, [pc, #76]	; (80109a8 <_sbrk+0x64>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d102      	bne.n	8010966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010960:	4b11      	ldr	r3, [pc, #68]	; (80109a8 <_sbrk+0x64>)
 8010962:	4a12      	ldr	r2, [pc, #72]	; (80109ac <_sbrk+0x68>)
 8010964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010966:	4b10      	ldr	r3, [pc, #64]	; (80109a8 <_sbrk+0x64>)
 8010968:	681a      	ldr	r2, [r3, #0]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	4413      	add	r3, r2
 801096e:	693a      	ldr	r2, [r7, #16]
 8010970:	429a      	cmp	r2, r3
 8010972:	d207      	bcs.n	8010984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010974:	f001 fb9c 	bl	80120b0 <__errno>
 8010978:	4603      	mov	r3, r0
 801097a:	220c      	movs	r2, #12
 801097c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801097e:	f04f 33ff 	mov.w	r3, #4294967295
 8010982:	e009      	b.n	8010998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010984:	4b08      	ldr	r3, [pc, #32]	; (80109a8 <_sbrk+0x64>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801098a:	4b07      	ldr	r3, [pc, #28]	; (80109a8 <_sbrk+0x64>)
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	4413      	add	r3, r2
 8010992:	4a05      	ldr	r2, [pc, #20]	; (80109a8 <_sbrk+0x64>)
 8010994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010996:	68fb      	ldr	r3, [r7, #12]
}
 8010998:	4618      	mov	r0, r3
 801099a:	3718      	adds	r7, #24
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	20020000 	.word	0x20020000
 80109a4:	00000400 	.word	0x00000400
 80109a8:	200000d0 	.word	0x200000d0
 80109ac:	200000e8 	.word	0x200000e8

080109b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80109b0:	b480      	push	{r7}
 80109b2:	af00      	add	r7, sp, #0
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80109b4:	4b03      	ldr	r3, [pc, #12]	; (80109c4 <SystemInit+0x14>)
 80109b6:	4a04      	ldr	r2, [pc, #16]	; (80109c8 <SystemInit+0x18>)
 80109b8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80109ba:	bf00      	nop
 80109bc:	46bd      	mov	sp, r7
 80109be:	bc80      	pop	{r7}
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	e000ed00 	.word	0xe000ed00
 80109c8:	08010000 	.word	0x08010000

080109cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80109cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80109d0:	480d      	ldr	r0, [pc, #52]	; (8010a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80109d2:	490e      	ldr	r1, [pc, #56]	; (8010a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80109d4:	4a0e      	ldr	r2, [pc, #56]	; (8010a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80109d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80109d8:	e002      	b.n	80109e0 <LoopCopyDataInit>

080109da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80109da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80109dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80109de:	3304      	adds	r3, #4

080109e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80109e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80109e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80109e4:	d3f9      	bcc.n	80109da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80109e6:	4a0b      	ldr	r2, [pc, #44]	; (8010a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80109e8:	4c0b      	ldr	r4, [pc, #44]	; (8010a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80109ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80109ec:	e001      	b.n	80109f2 <LoopFillZerobss>

080109ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80109ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80109f0:	3204      	adds	r2, #4

080109f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80109f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80109f4:	d3fb      	bcc.n	80109ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80109f6:	f7ff ffdb 	bl	80109b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80109fa:	f001 fb5f 	bl	80120bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80109fe:	f7ff fdc1 	bl	8010584 <main>
  bx  lr    
 8010a02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010a0c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8010a10:	08012a80 	.word	0x08012a80
  ldr r2, =_sbss
 8010a14:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8010a18:	200000e8 	.word	0x200000e8

08010a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010a1c:	e7fe      	b.n	8010a1c <ADC_IRQHandler>
	...

08010a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010a24:	4b0e      	ldr	r3, [pc, #56]	; (8010a60 <HAL_Init+0x40>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4a0d      	ldr	r2, [pc, #52]	; (8010a60 <HAL_Init+0x40>)
 8010a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010a30:	4b0b      	ldr	r3, [pc, #44]	; (8010a60 <HAL_Init+0x40>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4a0a      	ldr	r2, [pc, #40]	; (8010a60 <HAL_Init+0x40>)
 8010a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010a3c:	4b08      	ldr	r3, [pc, #32]	; (8010a60 <HAL_Init+0x40>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4a07      	ldr	r2, [pc, #28]	; (8010a60 <HAL_Init+0x40>)
 8010a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010a48:	2003      	movs	r0, #3
 8010a4a:	f000 f92b 	bl	8010ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010a4e:	200f      	movs	r0, #15
 8010a50:	f000 f808 	bl	8010a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010a54:	f7ff fee0 	bl	8010818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010a58:	2300      	movs	r3, #0
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	40023c00 	.word	0x40023c00

08010a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010a6c:	4b12      	ldr	r3, [pc, #72]	; (8010ab8 <HAL_InitTick+0x54>)
 8010a6e:	681a      	ldr	r2, [r3, #0]
 8010a70:	4b12      	ldr	r3, [pc, #72]	; (8010abc <HAL_InitTick+0x58>)
 8010a72:	781b      	ldrb	r3, [r3, #0]
 8010a74:	4619      	mov	r1, r3
 8010a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a82:	4618      	mov	r0, r3
 8010a84:	f000 f935 	bl	8010cf2 <HAL_SYSTICK_Config>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d001      	beq.n	8010a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010a8e:	2301      	movs	r3, #1
 8010a90:	e00e      	b.n	8010ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2b0f      	cmp	r3, #15
 8010a96:	d80a      	bhi.n	8010aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010a98:	2200      	movs	r2, #0
 8010a9a:	6879      	ldr	r1, [r7, #4]
 8010a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa0:	f000 f90b 	bl	8010cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010aa4:	4a06      	ldr	r2, [pc, #24]	; (8010ac0 <HAL_InitTick+0x5c>)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	e000      	b.n	8010ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010aae:	2301      	movs	r3, #1
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	20000000 	.word	0x20000000
 8010abc:	20000008 	.word	0x20000008
 8010ac0:	20000004 	.word	0x20000004

08010ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010ac8:	4b05      	ldr	r3, [pc, #20]	; (8010ae0 <HAL_IncTick+0x1c>)
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	461a      	mov	r2, r3
 8010ace:	4b05      	ldr	r3, [pc, #20]	; (8010ae4 <HAL_IncTick+0x20>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4413      	add	r3, r2
 8010ad4:	4a03      	ldr	r2, [pc, #12]	; (8010ae4 <HAL_IncTick+0x20>)
 8010ad6:	6013      	str	r3, [r2, #0]
}
 8010ad8:	bf00      	nop
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bc80      	pop	{r7}
 8010ade:	4770      	bx	lr
 8010ae0:	20000008 	.word	0x20000008
 8010ae4:	200000d4 	.word	0x200000d4

08010ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	af00      	add	r7, sp, #0
  return uwTick;
 8010aec:	4b02      	ldr	r3, [pc, #8]	; (8010af8 <HAL_GetTick+0x10>)
 8010aee:	681b      	ldr	r3, [r3, #0]
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bc80      	pop	{r7}
 8010af6:	4770      	bx	lr
 8010af8:	200000d4 	.word	0x200000d4

08010afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b084      	sub	sp, #16
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010b04:	f7ff fff0 	bl	8010ae8 <HAL_GetTick>
 8010b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b14:	d005      	beq.n	8010b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010b16:	4b0a      	ldr	r3, [pc, #40]	; (8010b40 <HAL_Delay+0x44>)
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	461a      	mov	r2, r3
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	4413      	add	r3, r2
 8010b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010b22:	bf00      	nop
 8010b24:	f7ff ffe0 	bl	8010ae8 <HAL_GetTick>
 8010b28:	4602      	mov	r2, r0
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	1ad3      	subs	r3, r2, r3
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d8f7      	bhi.n	8010b24 <HAL_Delay+0x28>
  {
  }
}
 8010b34:	bf00      	nop
 8010b36:	bf00      	nop
 8010b38:	3710      	adds	r7, #16
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	20000008 	.word	0x20000008

08010b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b085      	sub	sp, #20
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f003 0307 	and.w	r3, r3, #7
 8010b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010b54:	4b0c      	ldr	r3, [pc, #48]	; (8010b88 <__NVIC_SetPriorityGrouping+0x44>)
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010b5a:	68ba      	ldr	r2, [r7, #8]
 8010b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010b60:	4013      	ands	r3, r2
 8010b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010b76:	4a04      	ldr	r2, [pc, #16]	; (8010b88 <__NVIC_SetPriorityGrouping+0x44>)
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	60d3      	str	r3, [r2, #12]
}
 8010b7c:	bf00      	nop
 8010b7e:	3714      	adds	r7, #20
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bc80      	pop	{r7}
 8010b84:	4770      	bx	lr
 8010b86:	bf00      	nop
 8010b88:	e000ed00 	.word	0xe000ed00

08010b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010b90:	4b04      	ldr	r3, [pc, #16]	; (8010ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8010b92:	68db      	ldr	r3, [r3, #12]
 8010b94:	0a1b      	lsrs	r3, r3, #8
 8010b96:	f003 0307 	and.w	r3, r3, #7
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bc80      	pop	{r7}
 8010ba0:	4770      	bx	lr
 8010ba2:	bf00      	nop
 8010ba4:	e000ed00 	.word	0xe000ed00

08010ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	4603      	mov	r3, r0
 8010bb0:	6039      	str	r1, [r7, #0]
 8010bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	db0a      	blt.n	8010bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	b2da      	uxtb	r2, r3
 8010bc0:	490c      	ldr	r1, [pc, #48]	; (8010bf4 <__NVIC_SetPriority+0x4c>)
 8010bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bc6:	0112      	lsls	r2, r2, #4
 8010bc8:	b2d2      	uxtb	r2, r2
 8010bca:	440b      	add	r3, r1
 8010bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010bd0:	e00a      	b.n	8010be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	b2da      	uxtb	r2, r3
 8010bd6:	4908      	ldr	r1, [pc, #32]	; (8010bf8 <__NVIC_SetPriority+0x50>)
 8010bd8:	79fb      	ldrb	r3, [r7, #7]
 8010bda:	f003 030f 	and.w	r3, r3, #15
 8010bde:	3b04      	subs	r3, #4
 8010be0:	0112      	lsls	r2, r2, #4
 8010be2:	b2d2      	uxtb	r2, r2
 8010be4:	440b      	add	r3, r1
 8010be6:	761a      	strb	r2, [r3, #24]
}
 8010be8:	bf00      	nop
 8010bea:	370c      	adds	r7, #12
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bc80      	pop	{r7}
 8010bf0:	4770      	bx	lr
 8010bf2:	bf00      	nop
 8010bf4:	e000e100 	.word	0xe000e100
 8010bf8:	e000ed00 	.word	0xe000ed00

08010bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	b089      	sub	sp, #36	; 0x24
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f003 0307 	and.w	r3, r3, #7
 8010c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	f1c3 0307 	rsb	r3, r3, #7
 8010c16:	2b04      	cmp	r3, #4
 8010c18:	bf28      	it	cs
 8010c1a:	2304      	movcs	r3, #4
 8010c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010c1e:	69fb      	ldr	r3, [r7, #28]
 8010c20:	3304      	adds	r3, #4
 8010c22:	2b06      	cmp	r3, #6
 8010c24:	d902      	bls.n	8010c2c <NVIC_EncodePriority+0x30>
 8010c26:	69fb      	ldr	r3, [r7, #28]
 8010c28:	3b03      	subs	r3, #3
 8010c2a:	e000      	b.n	8010c2e <NVIC_EncodePriority+0x32>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c30:	f04f 32ff 	mov.w	r2, #4294967295
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	fa02 f303 	lsl.w	r3, r2, r3
 8010c3a:	43da      	mvns	r2, r3
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	401a      	ands	r2, r3
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010c44:	f04f 31ff 	mov.w	r1, #4294967295
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8010c4e:	43d9      	mvns	r1, r3
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c54:	4313      	orrs	r3, r2
         );
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3724      	adds	r7, #36	; 0x24
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bc80      	pop	{r7}
 8010c5e:	4770      	bx	lr

08010c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	3b01      	subs	r3, #1
 8010c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010c70:	d301      	bcc.n	8010c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010c72:	2301      	movs	r3, #1
 8010c74:	e00f      	b.n	8010c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010c76:	4a0a      	ldr	r2, [pc, #40]	; (8010ca0 <SysTick_Config+0x40>)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	3b01      	subs	r3, #1
 8010c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010c7e:	210f      	movs	r1, #15
 8010c80:	f04f 30ff 	mov.w	r0, #4294967295
 8010c84:	f7ff ff90 	bl	8010ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010c88:	4b05      	ldr	r3, [pc, #20]	; (8010ca0 <SysTick_Config+0x40>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010c8e:	4b04      	ldr	r3, [pc, #16]	; (8010ca0 <SysTick_Config+0x40>)
 8010c90:	2207      	movs	r2, #7
 8010c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010c94:	2300      	movs	r3, #0
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3708      	adds	r7, #8
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	e000e010 	.word	0xe000e010

08010ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7ff ff49 	bl	8010b44 <__NVIC_SetPriorityGrouping>
}
 8010cb2:	bf00      	nop
 8010cb4:	3708      	adds	r7, #8
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}

08010cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010cba:	b580      	push	{r7, lr}
 8010cbc:	b086      	sub	sp, #24
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	60b9      	str	r1, [r7, #8]
 8010cc4:	607a      	str	r2, [r7, #4]
 8010cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010ccc:	f7ff ff5e 	bl	8010b8c <__NVIC_GetPriorityGrouping>
 8010cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	68b9      	ldr	r1, [r7, #8]
 8010cd6:	6978      	ldr	r0, [r7, #20]
 8010cd8:	f7ff ff90 	bl	8010bfc <NVIC_EncodePriority>
 8010cdc:	4602      	mov	r2, r0
 8010cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ce2:	4611      	mov	r1, r2
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7ff ff5f 	bl	8010ba8 <__NVIC_SetPriority>
}
 8010cea:	bf00      	nop
 8010cec:	3718      	adds	r7, #24
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010cf2:	b580      	push	{r7, lr}
 8010cf4:	b082      	sub	sp, #8
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f7ff ffb0 	bl	8010c60 <SysTick_Config>
 8010d00:	4603      	mov	r3, r0
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3708      	adds	r7, #8
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
	...

08010d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b089      	sub	sp, #36	; 0x24
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010d16:	2300      	movs	r3, #0
 8010d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010d22:	2300      	movs	r3, #0
 8010d24:	61fb      	str	r3, [r7, #28]
 8010d26:	e16b      	b.n	8011000 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010d28:	2201      	movs	r2, #1
 8010d2a:	69fb      	ldr	r3, [r7, #28]
 8010d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8010d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	697a      	ldr	r2, [r7, #20]
 8010d38:	4013      	ands	r3, r2
 8010d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010d3c:	693a      	ldr	r2, [r7, #16]
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	429a      	cmp	r2, r3
 8010d42:	f040 815a 	bne.w	8010ffa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	f003 0303 	and.w	r3, r3, #3
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d005      	beq.n	8010d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010d5a:	2b02      	cmp	r3, #2
 8010d5c:	d130      	bne.n	8010dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010d64:	69fb      	ldr	r3, [r7, #28]
 8010d66:	005b      	lsls	r3, r3, #1
 8010d68:	2203      	movs	r2, #3
 8010d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d6e:	43db      	mvns	r3, r3
 8010d70:	69ba      	ldr	r2, [r7, #24]
 8010d72:	4013      	ands	r3, r2
 8010d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	68da      	ldr	r2, [r3, #12]
 8010d7a:	69fb      	ldr	r3, [r7, #28]
 8010d7c:	005b      	lsls	r3, r3, #1
 8010d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8010d82:	69ba      	ldr	r2, [r7, #24]
 8010d84:	4313      	orrs	r3, r2
 8010d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	69ba      	ldr	r2, [r7, #24]
 8010d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010d94:	2201      	movs	r2, #1
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	fa02 f303 	lsl.w	r3, r2, r3
 8010d9c:	43db      	mvns	r3, r3
 8010d9e:	69ba      	ldr	r2, [r7, #24]
 8010da0:	4013      	ands	r3, r2
 8010da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	091b      	lsrs	r3, r3, #4
 8010daa:	f003 0201 	and.w	r2, r3, #1
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	fa02 f303 	lsl.w	r3, r2, r3
 8010db4:	69ba      	ldr	r2, [r7, #24]
 8010db6:	4313      	orrs	r3, r2
 8010db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	69ba      	ldr	r2, [r7, #24]
 8010dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	f003 0303 	and.w	r3, r3, #3
 8010dc8:	2b03      	cmp	r3, #3
 8010dca:	d017      	beq.n	8010dfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	005b      	lsls	r3, r3, #1
 8010dd6:	2203      	movs	r2, #3
 8010dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8010ddc:	43db      	mvns	r3, r3
 8010dde:	69ba      	ldr	r2, [r7, #24]
 8010de0:	4013      	ands	r3, r2
 8010de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	689a      	ldr	r2, [r3, #8]
 8010de8:	69fb      	ldr	r3, [r7, #28]
 8010dea:	005b      	lsls	r3, r3, #1
 8010dec:	fa02 f303 	lsl.w	r3, r2, r3
 8010df0:	69ba      	ldr	r2, [r7, #24]
 8010df2:	4313      	orrs	r3, r2
 8010df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	69ba      	ldr	r2, [r7, #24]
 8010dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	f003 0303 	and.w	r3, r3, #3
 8010e04:	2b02      	cmp	r3, #2
 8010e06:	d123      	bne.n	8010e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	08da      	lsrs	r2, r3, #3
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	3208      	adds	r2, #8
 8010e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010e16:	69fb      	ldr	r3, [r7, #28]
 8010e18:	f003 0307 	and.w	r3, r3, #7
 8010e1c:	009b      	lsls	r3, r3, #2
 8010e1e:	220f      	movs	r2, #15
 8010e20:	fa02 f303 	lsl.w	r3, r2, r3
 8010e24:	43db      	mvns	r3, r3
 8010e26:	69ba      	ldr	r2, [r7, #24]
 8010e28:	4013      	ands	r3, r2
 8010e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	691a      	ldr	r2, [r3, #16]
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	f003 0307 	and.w	r3, r3, #7
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	fa02 f303 	lsl.w	r3, r2, r3
 8010e3c:	69ba      	ldr	r2, [r7, #24]
 8010e3e:	4313      	orrs	r3, r2
 8010e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010e42:	69fb      	ldr	r3, [r7, #28]
 8010e44:	08da      	lsrs	r2, r3, #3
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	3208      	adds	r2, #8
 8010e4a:	69b9      	ldr	r1, [r7, #24]
 8010e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	005b      	lsls	r3, r3, #1
 8010e5a:	2203      	movs	r2, #3
 8010e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e60:	43db      	mvns	r3, r3
 8010e62:	69ba      	ldr	r2, [r7, #24]
 8010e64:	4013      	ands	r3, r2
 8010e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	f003 0203 	and.w	r2, r3, #3
 8010e70:	69fb      	ldr	r3, [r7, #28]
 8010e72:	005b      	lsls	r3, r3, #1
 8010e74:	fa02 f303 	lsl.w	r3, r2, r3
 8010e78:	69ba      	ldr	r2, [r7, #24]
 8010e7a:	4313      	orrs	r3, r2
 8010e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	69ba      	ldr	r2, [r7, #24]
 8010e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	f000 80b4 	beq.w	8010ffa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010e92:	2300      	movs	r3, #0
 8010e94:	60fb      	str	r3, [r7, #12]
 8010e96:	4b5f      	ldr	r3, [pc, #380]	; (8011014 <HAL_GPIO_Init+0x308>)
 8010e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e9a:	4a5e      	ldr	r2, [pc, #376]	; (8011014 <HAL_GPIO_Init+0x308>)
 8010e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8010ea2:	4b5c      	ldr	r3, [pc, #368]	; (8011014 <HAL_GPIO_Init+0x308>)
 8010ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010eaa:	60fb      	str	r3, [r7, #12]
 8010eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010eae:	4a5a      	ldr	r2, [pc, #360]	; (8011018 <HAL_GPIO_Init+0x30c>)
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	089b      	lsrs	r3, r3, #2
 8010eb4:	3302      	adds	r3, #2
 8010eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	f003 0303 	and.w	r3, r3, #3
 8010ec2:	009b      	lsls	r3, r3, #2
 8010ec4:	220f      	movs	r2, #15
 8010ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8010eca:	43db      	mvns	r3, r3
 8010ecc:	69ba      	ldr	r2, [r7, #24]
 8010ece:	4013      	ands	r3, r2
 8010ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4a51      	ldr	r2, [pc, #324]	; (801101c <HAL_GPIO_Init+0x310>)
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d02b      	beq.n	8010f32 <HAL_GPIO_Init+0x226>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4a50      	ldr	r2, [pc, #320]	; (8011020 <HAL_GPIO_Init+0x314>)
 8010ede:	4293      	cmp	r3, r2
 8010ee0:	d025      	beq.n	8010f2e <HAL_GPIO_Init+0x222>
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	4a4f      	ldr	r2, [pc, #316]	; (8011024 <HAL_GPIO_Init+0x318>)
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d01f      	beq.n	8010f2a <HAL_GPIO_Init+0x21e>
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	4a4e      	ldr	r2, [pc, #312]	; (8011028 <HAL_GPIO_Init+0x31c>)
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d019      	beq.n	8010f26 <HAL_GPIO_Init+0x21a>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	4a4d      	ldr	r2, [pc, #308]	; (801102c <HAL_GPIO_Init+0x320>)
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d013      	beq.n	8010f22 <HAL_GPIO_Init+0x216>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	4a4c      	ldr	r2, [pc, #304]	; (8011030 <HAL_GPIO_Init+0x324>)
 8010efe:	4293      	cmp	r3, r2
 8010f00:	d00d      	beq.n	8010f1e <HAL_GPIO_Init+0x212>
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	4a4b      	ldr	r2, [pc, #300]	; (8011034 <HAL_GPIO_Init+0x328>)
 8010f06:	4293      	cmp	r3, r2
 8010f08:	d007      	beq.n	8010f1a <HAL_GPIO_Init+0x20e>
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	4a4a      	ldr	r2, [pc, #296]	; (8011038 <HAL_GPIO_Init+0x32c>)
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d101      	bne.n	8010f16 <HAL_GPIO_Init+0x20a>
 8010f12:	2307      	movs	r3, #7
 8010f14:	e00e      	b.n	8010f34 <HAL_GPIO_Init+0x228>
 8010f16:	2308      	movs	r3, #8
 8010f18:	e00c      	b.n	8010f34 <HAL_GPIO_Init+0x228>
 8010f1a:	2306      	movs	r3, #6
 8010f1c:	e00a      	b.n	8010f34 <HAL_GPIO_Init+0x228>
 8010f1e:	2305      	movs	r3, #5
 8010f20:	e008      	b.n	8010f34 <HAL_GPIO_Init+0x228>
 8010f22:	2304      	movs	r3, #4
 8010f24:	e006      	b.n	8010f34 <HAL_GPIO_Init+0x228>
 8010f26:	2303      	movs	r3, #3
 8010f28:	e004      	b.n	8010f34 <HAL_GPIO_Init+0x228>
 8010f2a:	2302      	movs	r3, #2
 8010f2c:	e002      	b.n	8010f34 <HAL_GPIO_Init+0x228>
 8010f2e:	2301      	movs	r3, #1
 8010f30:	e000      	b.n	8010f34 <HAL_GPIO_Init+0x228>
 8010f32:	2300      	movs	r3, #0
 8010f34:	69fa      	ldr	r2, [r7, #28]
 8010f36:	f002 0203 	and.w	r2, r2, #3
 8010f3a:	0092      	lsls	r2, r2, #2
 8010f3c:	4093      	lsls	r3, r2
 8010f3e:	69ba      	ldr	r2, [r7, #24]
 8010f40:	4313      	orrs	r3, r2
 8010f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010f44:	4934      	ldr	r1, [pc, #208]	; (8011018 <HAL_GPIO_Init+0x30c>)
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	089b      	lsrs	r3, r3, #2
 8010f4a:	3302      	adds	r3, #2
 8010f4c:	69ba      	ldr	r2, [r7, #24]
 8010f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010f52:	4b3a      	ldr	r3, [pc, #232]	; (801103c <HAL_GPIO_Init+0x330>)
 8010f54:	689b      	ldr	r3, [r3, #8]
 8010f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	43db      	mvns	r3, r3
 8010f5c:	69ba      	ldr	r2, [r7, #24]
 8010f5e:	4013      	ands	r3, r2
 8010f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d003      	beq.n	8010f76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8010f6e:	69ba      	ldr	r2, [r7, #24]
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	4313      	orrs	r3, r2
 8010f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010f76:	4a31      	ldr	r2, [pc, #196]	; (801103c <HAL_GPIO_Init+0x330>)
 8010f78:	69bb      	ldr	r3, [r7, #24]
 8010f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010f7c:	4b2f      	ldr	r3, [pc, #188]	; (801103c <HAL_GPIO_Init+0x330>)
 8010f7e:	68db      	ldr	r3, [r3, #12]
 8010f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	43db      	mvns	r3, r3
 8010f86:	69ba      	ldr	r2, [r7, #24]
 8010f88:	4013      	ands	r3, r2
 8010f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	685b      	ldr	r3, [r3, #4]
 8010f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d003      	beq.n	8010fa0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8010f98:	69ba      	ldr	r2, [r7, #24]
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	4313      	orrs	r3, r2
 8010f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010fa0:	4a26      	ldr	r2, [pc, #152]	; (801103c <HAL_GPIO_Init+0x330>)
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8010fa6:	4b25      	ldr	r3, [pc, #148]	; (801103c <HAL_GPIO_Init+0x330>)
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	43db      	mvns	r3, r3
 8010fb0:	69ba      	ldr	r2, [r7, #24]
 8010fb2:	4013      	ands	r3, r2
 8010fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d003      	beq.n	8010fca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8010fc2:	69ba      	ldr	r2, [r7, #24]
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	4313      	orrs	r3, r2
 8010fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010fca:	4a1c      	ldr	r2, [pc, #112]	; (801103c <HAL_GPIO_Init+0x330>)
 8010fcc:	69bb      	ldr	r3, [r7, #24]
 8010fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010fd0:	4b1a      	ldr	r3, [pc, #104]	; (801103c <HAL_GPIO_Init+0x330>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	43db      	mvns	r3, r3
 8010fda:	69ba      	ldr	r2, [r7, #24]
 8010fdc:	4013      	ands	r3, r2
 8010fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d003      	beq.n	8010ff4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8010fec:	69ba      	ldr	r2, [r7, #24]
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	4313      	orrs	r3, r2
 8010ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010ff4:	4a11      	ldr	r2, [pc, #68]	; (801103c <HAL_GPIO_Init+0x330>)
 8010ff6:	69bb      	ldr	r3, [r7, #24]
 8010ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010ffa:	69fb      	ldr	r3, [r7, #28]
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	61fb      	str	r3, [r7, #28]
 8011000:	69fb      	ldr	r3, [r7, #28]
 8011002:	2b0f      	cmp	r3, #15
 8011004:	f67f ae90 	bls.w	8010d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011008:	bf00      	nop
 801100a:	bf00      	nop
 801100c:	3724      	adds	r7, #36	; 0x24
 801100e:	46bd      	mov	sp, r7
 8011010:	bc80      	pop	{r7}
 8011012:	4770      	bx	lr
 8011014:	40023800 	.word	0x40023800
 8011018:	40013800 	.word	0x40013800
 801101c:	40020000 	.word	0x40020000
 8011020:	40020400 	.word	0x40020400
 8011024:	40020800 	.word	0x40020800
 8011028:	40020c00 	.word	0x40020c00
 801102c:	40021000 	.word	0x40021000
 8011030:	40021400 	.word	0x40021400
 8011034:	40021800 	.word	0x40021800
 8011038:	40021c00 	.word	0x40021c00
 801103c:	40013c00 	.word	0x40013c00

08011040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	460b      	mov	r3, r1
 801104a:	807b      	strh	r3, [r7, #2]
 801104c:	4613      	mov	r3, r2
 801104e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011050:	787b      	ldrb	r3, [r7, #1]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d003      	beq.n	801105e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011056:	887a      	ldrh	r2, [r7, #2]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801105c:	e003      	b.n	8011066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801105e:	887b      	ldrh	r3, [r7, #2]
 8011060:	041a      	lsls	r2, r3, #16
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	619a      	str	r2, [r3, #24]
}
 8011066:	bf00      	nop
 8011068:	370c      	adds	r7, #12
 801106a:	46bd      	mov	sp, r7
 801106c:	bc80      	pop	{r7}
 801106e:	4770      	bx	lr

08011070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b086      	sub	sp, #24
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d101      	bne.n	8011082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801107e:	2301      	movs	r3, #1
 8011080:	e267      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	f003 0301 	and.w	r3, r3, #1
 801108a:	2b00      	cmp	r3, #0
 801108c:	d075      	beq.n	801117a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801108e:	4b88      	ldr	r3, [pc, #544]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 8011090:	689b      	ldr	r3, [r3, #8]
 8011092:	f003 030c 	and.w	r3, r3, #12
 8011096:	2b04      	cmp	r3, #4
 8011098:	d00c      	beq.n	80110b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801109a:	4b85      	ldr	r3, [pc, #532]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 801109c:	689b      	ldr	r3, [r3, #8]
 801109e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80110a2:	2b08      	cmp	r3, #8
 80110a4:	d112      	bne.n	80110cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80110a6:	4b82      	ldr	r3, [pc, #520]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80110ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80110b2:	d10b      	bne.n	80110cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80110b4:	4b7e      	ldr	r3, [pc, #504]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d05b      	beq.n	8011178 <HAL_RCC_OscConfig+0x108>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d157      	bne.n	8011178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80110c8:	2301      	movs	r3, #1
 80110ca:	e242      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110d4:	d106      	bne.n	80110e4 <HAL_RCC_OscConfig+0x74>
 80110d6:	4b76      	ldr	r3, [pc, #472]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4a75      	ldr	r2, [pc, #468]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 80110dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80110e0:	6013      	str	r3, [r2, #0]
 80110e2:	e01d      	b.n	8011120 <HAL_RCC_OscConfig+0xb0>
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80110ec:	d10c      	bne.n	8011108 <HAL_RCC_OscConfig+0x98>
 80110ee:	4b70      	ldr	r3, [pc, #448]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	4a6f      	ldr	r2, [pc, #444]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 80110f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80110f8:	6013      	str	r3, [r2, #0]
 80110fa:	4b6d      	ldr	r3, [pc, #436]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	4a6c      	ldr	r2, [pc, #432]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 8011100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011104:	6013      	str	r3, [r2, #0]
 8011106:	e00b      	b.n	8011120 <HAL_RCC_OscConfig+0xb0>
 8011108:	4b69      	ldr	r3, [pc, #420]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4a68      	ldr	r2, [pc, #416]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 801110e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011112:	6013      	str	r3, [r2, #0]
 8011114:	4b66      	ldr	r3, [pc, #408]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	4a65      	ldr	r2, [pc, #404]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 801111a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801111e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	685b      	ldr	r3, [r3, #4]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d013      	beq.n	8011150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011128:	f7ff fcde 	bl	8010ae8 <HAL_GetTick>
 801112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801112e:	e008      	b.n	8011142 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011130:	f7ff fcda 	bl	8010ae8 <HAL_GetTick>
 8011134:	4602      	mov	r2, r0
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	1ad3      	subs	r3, r2, r3
 801113a:	2b64      	cmp	r3, #100	; 0x64
 801113c:	d901      	bls.n	8011142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801113e:	2303      	movs	r3, #3
 8011140:	e207      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011142:	4b5b      	ldr	r3, [pc, #364]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801114a:	2b00      	cmp	r3, #0
 801114c:	d0f0      	beq.n	8011130 <HAL_RCC_OscConfig+0xc0>
 801114e:	e014      	b.n	801117a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011150:	f7ff fcca 	bl	8010ae8 <HAL_GetTick>
 8011154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011156:	e008      	b.n	801116a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011158:	f7ff fcc6 	bl	8010ae8 <HAL_GetTick>
 801115c:	4602      	mov	r2, r0
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	1ad3      	subs	r3, r2, r3
 8011162:	2b64      	cmp	r3, #100	; 0x64
 8011164:	d901      	bls.n	801116a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011166:	2303      	movs	r3, #3
 8011168:	e1f3      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801116a:	4b51      	ldr	r3, [pc, #324]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011172:	2b00      	cmp	r3, #0
 8011174:	d1f0      	bne.n	8011158 <HAL_RCC_OscConfig+0xe8>
 8011176:	e000      	b.n	801117a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	f003 0302 	and.w	r3, r3, #2
 8011182:	2b00      	cmp	r3, #0
 8011184:	d063      	beq.n	801124e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011186:	4b4a      	ldr	r3, [pc, #296]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 8011188:	689b      	ldr	r3, [r3, #8]
 801118a:	f003 030c 	and.w	r3, r3, #12
 801118e:	2b00      	cmp	r3, #0
 8011190:	d00b      	beq.n	80111aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011192:	4b47      	ldr	r3, [pc, #284]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 8011194:	689b      	ldr	r3, [r3, #8]
 8011196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801119a:	2b08      	cmp	r3, #8
 801119c:	d11c      	bne.n	80111d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801119e:	4b44      	ldr	r3, [pc, #272]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d116      	bne.n	80111d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80111aa:	4b41      	ldr	r3, [pc, #260]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	f003 0302 	and.w	r3, r3, #2
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d005      	beq.n	80111c2 <HAL_RCC_OscConfig+0x152>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d001      	beq.n	80111c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80111be:	2301      	movs	r3, #1
 80111c0:	e1c7      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80111c2:	4b3b      	ldr	r3, [pc, #236]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	691b      	ldr	r3, [r3, #16]
 80111ce:	00db      	lsls	r3, r3, #3
 80111d0:	4937      	ldr	r1, [pc, #220]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 80111d2:	4313      	orrs	r3, r2
 80111d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80111d6:	e03a      	b.n	801124e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d020      	beq.n	8011222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80111e0:	4b34      	ldr	r3, [pc, #208]	; (80112b4 <HAL_RCC_OscConfig+0x244>)
 80111e2:	2201      	movs	r2, #1
 80111e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80111e6:	f7ff fc7f 	bl	8010ae8 <HAL_GetTick>
 80111ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80111ec:	e008      	b.n	8011200 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80111ee:	f7ff fc7b 	bl	8010ae8 <HAL_GetTick>
 80111f2:	4602      	mov	r2, r0
 80111f4:	693b      	ldr	r3, [r7, #16]
 80111f6:	1ad3      	subs	r3, r2, r3
 80111f8:	2b02      	cmp	r3, #2
 80111fa:	d901      	bls.n	8011200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80111fc:	2303      	movs	r3, #3
 80111fe:	e1a8      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011200:	4b2b      	ldr	r3, [pc, #172]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	f003 0302 	and.w	r3, r3, #2
 8011208:	2b00      	cmp	r3, #0
 801120a:	d0f0      	beq.n	80111ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801120c:	4b28      	ldr	r3, [pc, #160]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	691b      	ldr	r3, [r3, #16]
 8011218:	00db      	lsls	r3, r3, #3
 801121a:	4925      	ldr	r1, [pc, #148]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 801121c:	4313      	orrs	r3, r2
 801121e:	600b      	str	r3, [r1, #0]
 8011220:	e015      	b.n	801124e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011222:	4b24      	ldr	r3, [pc, #144]	; (80112b4 <HAL_RCC_OscConfig+0x244>)
 8011224:	2200      	movs	r2, #0
 8011226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011228:	f7ff fc5e 	bl	8010ae8 <HAL_GetTick>
 801122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801122e:	e008      	b.n	8011242 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011230:	f7ff fc5a 	bl	8010ae8 <HAL_GetTick>
 8011234:	4602      	mov	r2, r0
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	2b02      	cmp	r3, #2
 801123c:	d901      	bls.n	8011242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801123e:	2303      	movs	r3, #3
 8011240:	e187      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011242:	4b1b      	ldr	r3, [pc, #108]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f003 0302 	and.w	r3, r3, #2
 801124a:	2b00      	cmp	r3, #0
 801124c:	d1f0      	bne.n	8011230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f003 0308 	and.w	r3, r3, #8
 8011256:	2b00      	cmp	r3, #0
 8011258:	d036      	beq.n	80112c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	695b      	ldr	r3, [r3, #20]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d016      	beq.n	8011290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011262:	4b15      	ldr	r3, [pc, #84]	; (80112b8 <HAL_RCC_OscConfig+0x248>)
 8011264:	2201      	movs	r2, #1
 8011266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011268:	f7ff fc3e 	bl	8010ae8 <HAL_GetTick>
 801126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801126e:	e008      	b.n	8011282 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011270:	f7ff fc3a 	bl	8010ae8 <HAL_GetTick>
 8011274:	4602      	mov	r2, r0
 8011276:	693b      	ldr	r3, [r7, #16]
 8011278:	1ad3      	subs	r3, r2, r3
 801127a:	2b02      	cmp	r3, #2
 801127c:	d901      	bls.n	8011282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801127e:	2303      	movs	r3, #3
 8011280:	e167      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011282:	4b0b      	ldr	r3, [pc, #44]	; (80112b0 <HAL_RCC_OscConfig+0x240>)
 8011284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011286:	f003 0302 	and.w	r3, r3, #2
 801128a:	2b00      	cmp	r3, #0
 801128c:	d0f0      	beq.n	8011270 <HAL_RCC_OscConfig+0x200>
 801128e:	e01b      	b.n	80112c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011290:	4b09      	ldr	r3, [pc, #36]	; (80112b8 <HAL_RCC_OscConfig+0x248>)
 8011292:	2200      	movs	r2, #0
 8011294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011296:	f7ff fc27 	bl	8010ae8 <HAL_GetTick>
 801129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801129c:	e00e      	b.n	80112bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801129e:	f7ff fc23 	bl	8010ae8 <HAL_GetTick>
 80112a2:	4602      	mov	r2, r0
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	2b02      	cmp	r3, #2
 80112aa:	d907      	bls.n	80112bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80112ac:	2303      	movs	r3, #3
 80112ae:	e150      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
 80112b0:	40023800 	.word	0x40023800
 80112b4:	42470000 	.word	0x42470000
 80112b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80112bc:	4b88      	ldr	r3, [pc, #544]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 80112be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112c0:	f003 0302 	and.w	r3, r3, #2
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d1ea      	bne.n	801129e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f003 0304 	and.w	r3, r3, #4
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	f000 8097 	beq.w	8011404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80112d6:	2300      	movs	r3, #0
 80112d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80112da:	4b81      	ldr	r3, [pc, #516]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 80112dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d10f      	bne.n	8011306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80112e6:	2300      	movs	r3, #0
 80112e8:	60bb      	str	r3, [r7, #8]
 80112ea:	4b7d      	ldr	r3, [pc, #500]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 80112ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ee:	4a7c      	ldr	r2, [pc, #496]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 80112f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80112f4:	6413      	str	r3, [r2, #64]	; 0x40
 80112f6:	4b7a      	ldr	r3, [pc, #488]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 80112f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80112fe:	60bb      	str	r3, [r7, #8]
 8011300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011302:	2301      	movs	r3, #1
 8011304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011306:	4b77      	ldr	r3, [pc, #476]	; (80114e4 <HAL_RCC_OscConfig+0x474>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801130e:	2b00      	cmp	r3, #0
 8011310:	d118      	bne.n	8011344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011312:	4b74      	ldr	r3, [pc, #464]	; (80114e4 <HAL_RCC_OscConfig+0x474>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	4a73      	ldr	r2, [pc, #460]	; (80114e4 <HAL_RCC_OscConfig+0x474>)
 8011318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801131c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801131e:	f7ff fbe3 	bl	8010ae8 <HAL_GetTick>
 8011322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011324:	e008      	b.n	8011338 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011326:	f7ff fbdf 	bl	8010ae8 <HAL_GetTick>
 801132a:	4602      	mov	r2, r0
 801132c:	693b      	ldr	r3, [r7, #16]
 801132e:	1ad3      	subs	r3, r2, r3
 8011330:	2b02      	cmp	r3, #2
 8011332:	d901      	bls.n	8011338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8011334:	2303      	movs	r3, #3
 8011336:	e10c      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011338:	4b6a      	ldr	r3, [pc, #424]	; (80114e4 <HAL_RCC_OscConfig+0x474>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011340:	2b00      	cmp	r3, #0
 8011342:	d0f0      	beq.n	8011326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	689b      	ldr	r3, [r3, #8]
 8011348:	2b01      	cmp	r3, #1
 801134a:	d106      	bne.n	801135a <HAL_RCC_OscConfig+0x2ea>
 801134c:	4b64      	ldr	r3, [pc, #400]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 801134e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011350:	4a63      	ldr	r2, [pc, #396]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 8011352:	f043 0301 	orr.w	r3, r3, #1
 8011356:	6713      	str	r3, [r2, #112]	; 0x70
 8011358:	e01c      	b.n	8011394 <HAL_RCC_OscConfig+0x324>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	689b      	ldr	r3, [r3, #8]
 801135e:	2b05      	cmp	r3, #5
 8011360:	d10c      	bne.n	801137c <HAL_RCC_OscConfig+0x30c>
 8011362:	4b5f      	ldr	r3, [pc, #380]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 8011364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011366:	4a5e      	ldr	r2, [pc, #376]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 8011368:	f043 0304 	orr.w	r3, r3, #4
 801136c:	6713      	str	r3, [r2, #112]	; 0x70
 801136e:	4b5c      	ldr	r3, [pc, #368]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 8011370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011372:	4a5b      	ldr	r2, [pc, #364]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 8011374:	f043 0301 	orr.w	r3, r3, #1
 8011378:	6713      	str	r3, [r2, #112]	; 0x70
 801137a:	e00b      	b.n	8011394 <HAL_RCC_OscConfig+0x324>
 801137c:	4b58      	ldr	r3, [pc, #352]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 801137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011380:	4a57      	ldr	r2, [pc, #348]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 8011382:	f023 0301 	bic.w	r3, r3, #1
 8011386:	6713      	str	r3, [r2, #112]	; 0x70
 8011388:	4b55      	ldr	r3, [pc, #340]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 801138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801138c:	4a54      	ldr	r2, [pc, #336]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 801138e:	f023 0304 	bic.w	r3, r3, #4
 8011392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	689b      	ldr	r3, [r3, #8]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d015      	beq.n	80113c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801139c:	f7ff fba4 	bl	8010ae8 <HAL_GetTick>
 80113a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80113a2:	e00a      	b.n	80113ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80113a4:	f7ff fba0 	bl	8010ae8 <HAL_GetTick>
 80113a8:	4602      	mov	r2, r0
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	1ad3      	subs	r3, r2, r3
 80113ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80113b2:	4293      	cmp	r3, r2
 80113b4:	d901      	bls.n	80113ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80113b6:	2303      	movs	r3, #3
 80113b8:	e0cb      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80113ba:	4b49      	ldr	r3, [pc, #292]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 80113bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113be:	f003 0302 	and.w	r3, r3, #2
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d0ee      	beq.n	80113a4 <HAL_RCC_OscConfig+0x334>
 80113c6:	e014      	b.n	80113f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80113c8:	f7ff fb8e 	bl	8010ae8 <HAL_GetTick>
 80113cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80113ce:	e00a      	b.n	80113e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80113d0:	f7ff fb8a 	bl	8010ae8 <HAL_GetTick>
 80113d4:	4602      	mov	r2, r0
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	1ad3      	subs	r3, r2, r3
 80113da:	f241 3288 	movw	r2, #5000	; 0x1388
 80113de:	4293      	cmp	r3, r2
 80113e0:	d901      	bls.n	80113e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80113e2:	2303      	movs	r3, #3
 80113e4:	e0b5      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80113e6:	4b3e      	ldr	r3, [pc, #248]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 80113e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113ea:	f003 0302 	and.w	r3, r3, #2
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d1ee      	bne.n	80113d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80113f2:	7dfb      	ldrb	r3, [r7, #23]
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	d105      	bne.n	8011404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80113f8:	4b39      	ldr	r3, [pc, #228]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 80113fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113fc:	4a38      	ldr	r2, [pc, #224]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 80113fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	699b      	ldr	r3, [r3, #24]
 8011408:	2b00      	cmp	r3, #0
 801140a:	f000 80a1 	beq.w	8011550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801140e:	4b34      	ldr	r3, [pc, #208]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 8011410:	689b      	ldr	r3, [r3, #8]
 8011412:	f003 030c 	and.w	r3, r3, #12
 8011416:	2b08      	cmp	r3, #8
 8011418:	d05c      	beq.n	80114d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	699b      	ldr	r3, [r3, #24]
 801141e:	2b02      	cmp	r3, #2
 8011420:	d141      	bne.n	80114a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011422:	4b31      	ldr	r3, [pc, #196]	; (80114e8 <HAL_RCC_OscConfig+0x478>)
 8011424:	2200      	movs	r2, #0
 8011426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011428:	f7ff fb5e 	bl	8010ae8 <HAL_GetTick>
 801142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801142e:	e008      	b.n	8011442 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011430:	f7ff fb5a 	bl	8010ae8 <HAL_GetTick>
 8011434:	4602      	mov	r2, r0
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	2b02      	cmp	r3, #2
 801143c:	d901      	bls.n	8011442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801143e:	2303      	movs	r3, #3
 8011440:	e087      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011442:	4b27      	ldr	r3, [pc, #156]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801144a:	2b00      	cmp	r3, #0
 801144c:	d1f0      	bne.n	8011430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	69da      	ldr	r2, [r3, #28]
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6a1b      	ldr	r3, [r3, #32]
 8011456:	431a      	orrs	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801145c:	019b      	lsls	r3, r3, #6
 801145e:	431a      	orrs	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011464:	085b      	lsrs	r3, r3, #1
 8011466:	3b01      	subs	r3, #1
 8011468:	041b      	lsls	r3, r3, #16
 801146a:	431a      	orrs	r2, r3
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011470:	061b      	lsls	r3, r3, #24
 8011472:	491b      	ldr	r1, [pc, #108]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 8011474:	4313      	orrs	r3, r2
 8011476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011478:	4b1b      	ldr	r3, [pc, #108]	; (80114e8 <HAL_RCC_OscConfig+0x478>)
 801147a:	2201      	movs	r2, #1
 801147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801147e:	f7ff fb33 	bl	8010ae8 <HAL_GetTick>
 8011482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011484:	e008      	b.n	8011498 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011486:	f7ff fb2f 	bl	8010ae8 <HAL_GetTick>
 801148a:	4602      	mov	r2, r0
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	1ad3      	subs	r3, r2, r3
 8011490:	2b02      	cmp	r3, #2
 8011492:	d901      	bls.n	8011498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8011494:	2303      	movs	r3, #3
 8011496:	e05c      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011498:	4b11      	ldr	r3, [pc, #68]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d0f0      	beq.n	8011486 <HAL_RCC_OscConfig+0x416>
 80114a4:	e054      	b.n	8011550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80114a6:	4b10      	ldr	r3, [pc, #64]	; (80114e8 <HAL_RCC_OscConfig+0x478>)
 80114a8:	2200      	movs	r2, #0
 80114aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80114ac:	f7ff fb1c 	bl	8010ae8 <HAL_GetTick>
 80114b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80114b2:	e008      	b.n	80114c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80114b4:	f7ff fb18 	bl	8010ae8 <HAL_GetTick>
 80114b8:	4602      	mov	r2, r0
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	1ad3      	subs	r3, r2, r3
 80114be:	2b02      	cmp	r3, #2
 80114c0:	d901      	bls.n	80114c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80114c2:	2303      	movs	r3, #3
 80114c4:	e045      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80114c6:	4b06      	ldr	r3, [pc, #24]	; (80114e0 <HAL_RCC_OscConfig+0x470>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d1f0      	bne.n	80114b4 <HAL_RCC_OscConfig+0x444>
 80114d2:	e03d      	b.n	8011550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	699b      	ldr	r3, [r3, #24]
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d107      	bne.n	80114ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80114dc:	2301      	movs	r3, #1
 80114de:	e038      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
 80114e0:	40023800 	.word	0x40023800
 80114e4:	40007000 	.word	0x40007000
 80114e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80114ec:	4b1b      	ldr	r3, [pc, #108]	; (801155c <HAL_RCC_OscConfig+0x4ec>)
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	699b      	ldr	r3, [r3, #24]
 80114f6:	2b01      	cmp	r3, #1
 80114f8:	d028      	beq.n	801154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011504:	429a      	cmp	r2, r3
 8011506:	d121      	bne.n	801154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011512:	429a      	cmp	r2, r3
 8011514:	d11a      	bne.n	801154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011516:	68fa      	ldr	r2, [r7, #12]
 8011518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801151c:	4013      	ands	r3, r2
 801151e:	687a      	ldr	r2, [r7, #4]
 8011520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011524:	4293      	cmp	r3, r2
 8011526:	d111      	bne.n	801154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011532:	085b      	lsrs	r3, r3, #1
 8011534:	3b01      	subs	r3, #1
 8011536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011538:	429a      	cmp	r2, r3
 801153a:	d107      	bne.n	801154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011548:	429a      	cmp	r2, r3
 801154a:	d001      	beq.n	8011550 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801154c:	2301      	movs	r3, #1
 801154e:	e000      	b.n	8011552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8011550:	2300      	movs	r3, #0
}
 8011552:	4618      	mov	r0, r3
 8011554:	3718      	adds	r7, #24
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	40023800 	.word	0x40023800

08011560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b084      	sub	sp, #16
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d101      	bne.n	8011574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011570:	2301      	movs	r3, #1
 8011572:	e0cc      	b.n	801170e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011574:	4b68      	ldr	r3, [pc, #416]	; (8011718 <HAL_RCC_ClockConfig+0x1b8>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f003 0307 	and.w	r3, r3, #7
 801157c:	683a      	ldr	r2, [r7, #0]
 801157e:	429a      	cmp	r2, r3
 8011580:	d90c      	bls.n	801159c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011582:	4b65      	ldr	r3, [pc, #404]	; (8011718 <HAL_RCC_ClockConfig+0x1b8>)
 8011584:	683a      	ldr	r2, [r7, #0]
 8011586:	b2d2      	uxtb	r2, r2
 8011588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801158a:	4b63      	ldr	r3, [pc, #396]	; (8011718 <HAL_RCC_ClockConfig+0x1b8>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	f003 0307 	and.w	r3, r3, #7
 8011592:	683a      	ldr	r2, [r7, #0]
 8011594:	429a      	cmp	r2, r3
 8011596:	d001      	beq.n	801159c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011598:	2301      	movs	r3, #1
 801159a:	e0b8      	b.n	801170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f003 0302 	and.w	r3, r3, #2
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d020      	beq.n	80115ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f003 0304 	and.w	r3, r3, #4
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d005      	beq.n	80115c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80115b4:	4b59      	ldr	r3, [pc, #356]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 80115b6:	689b      	ldr	r3, [r3, #8]
 80115b8:	4a58      	ldr	r2, [pc, #352]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 80115ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80115be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	f003 0308 	and.w	r3, r3, #8
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d005      	beq.n	80115d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80115cc:	4b53      	ldr	r3, [pc, #332]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 80115ce:	689b      	ldr	r3, [r3, #8]
 80115d0:	4a52      	ldr	r2, [pc, #328]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 80115d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80115d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80115d8:	4b50      	ldr	r3, [pc, #320]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 80115da:	689b      	ldr	r3, [r3, #8]
 80115dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	689b      	ldr	r3, [r3, #8]
 80115e4:	494d      	ldr	r1, [pc, #308]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 80115e6:	4313      	orrs	r3, r2
 80115e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	f003 0301 	and.w	r3, r3, #1
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d044      	beq.n	8011680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	685b      	ldr	r3, [r3, #4]
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d107      	bne.n	801160e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80115fe:	4b47      	ldr	r3, [pc, #284]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011606:	2b00      	cmp	r3, #0
 8011608:	d119      	bne.n	801163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801160a:	2301      	movs	r3, #1
 801160c:	e07f      	b.n	801170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	2b02      	cmp	r3, #2
 8011614:	d003      	beq.n	801161e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801161a:	2b03      	cmp	r3, #3
 801161c:	d107      	bne.n	801162e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801161e:	4b3f      	ldr	r3, [pc, #252]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011626:	2b00      	cmp	r3, #0
 8011628:	d109      	bne.n	801163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801162a:	2301      	movs	r3, #1
 801162c:	e06f      	b.n	801170e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801162e:	4b3b      	ldr	r3, [pc, #236]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f003 0302 	and.w	r3, r3, #2
 8011636:	2b00      	cmp	r3, #0
 8011638:	d101      	bne.n	801163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801163a:	2301      	movs	r3, #1
 801163c:	e067      	b.n	801170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801163e:	4b37      	ldr	r3, [pc, #220]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 8011640:	689b      	ldr	r3, [r3, #8]
 8011642:	f023 0203 	bic.w	r2, r3, #3
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	4934      	ldr	r1, [pc, #208]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 801164c:	4313      	orrs	r3, r2
 801164e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011650:	f7ff fa4a 	bl	8010ae8 <HAL_GetTick>
 8011654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011656:	e00a      	b.n	801166e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011658:	f7ff fa46 	bl	8010ae8 <HAL_GetTick>
 801165c:	4602      	mov	r2, r0
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	f241 3288 	movw	r2, #5000	; 0x1388
 8011666:	4293      	cmp	r3, r2
 8011668:	d901      	bls.n	801166e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801166a:	2303      	movs	r3, #3
 801166c:	e04f      	b.n	801170e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801166e:	4b2b      	ldr	r3, [pc, #172]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 8011670:	689b      	ldr	r3, [r3, #8]
 8011672:	f003 020c 	and.w	r2, r3, #12
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	685b      	ldr	r3, [r3, #4]
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	429a      	cmp	r2, r3
 801167e:	d1eb      	bne.n	8011658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011680:	4b25      	ldr	r3, [pc, #148]	; (8011718 <HAL_RCC_ClockConfig+0x1b8>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	f003 0307 	and.w	r3, r3, #7
 8011688:	683a      	ldr	r2, [r7, #0]
 801168a:	429a      	cmp	r2, r3
 801168c:	d20c      	bcs.n	80116a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801168e:	4b22      	ldr	r3, [pc, #136]	; (8011718 <HAL_RCC_ClockConfig+0x1b8>)
 8011690:	683a      	ldr	r2, [r7, #0]
 8011692:	b2d2      	uxtb	r2, r2
 8011694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011696:	4b20      	ldr	r3, [pc, #128]	; (8011718 <HAL_RCC_ClockConfig+0x1b8>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f003 0307 	and.w	r3, r3, #7
 801169e:	683a      	ldr	r2, [r7, #0]
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d001      	beq.n	80116a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80116a4:	2301      	movs	r3, #1
 80116a6:	e032      	b.n	801170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f003 0304 	and.w	r3, r3, #4
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d008      	beq.n	80116c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80116b4:	4b19      	ldr	r3, [pc, #100]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 80116b6:	689b      	ldr	r3, [r3, #8]
 80116b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	4916      	ldr	r1, [pc, #88]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 80116c2:	4313      	orrs	r3, r2
 80116c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	f003 0308 	and.w	r3, r3, #8
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d009      	beq.n	80116e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80116d2:	4b12      	ldr	r3, [pc, #72]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 80116d4:	689b      	ldr	r3, [r3, #8]
 80116d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	691b      	ldr	r3, [r3, #16]
 80116de:	00db      	lsls	r3, r3, #3
 80116e0:	490e      	ldr	r1, [pc, #56]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 80116e2:	4313      	orrs	r3, r2
 80116e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80116e6:	f000 f821 	bl	801172c <HAL_RCC_GetSysClockFreq>
 80116ea:	4602      	mov	r2, r0
 80116ec:	4b0b      	ldr	r3, [pc, #44]	; (801171c <HAL_RCC_ClockConfig+0x1bc>)
 80116ee:	689b      	ldr	r3, [r3, #8]
 80116f0:	091b      	lsrs	r3, r3, #4
 80116f2:	f003 030f 	and.w	r3, r3, #15
 80116f6:	490a      	ldr	r1, [pc, #40]	; (8011720 <HAL_RCC_ClockConfig+0x1c0>)
 80116f8:	5ccb      	ldrb	r3, [r1, r3]
 80116fa:	fa22 f303 	lsr.w	r3, r2, r3
 80116fe:	4a09      	ldr	r2, [pc, #36]	; (8011724 <HAL_RCC_ClockConfig+0x1c4>)
 8011700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011702:	4b09      	ldr	r3, [pc, #36]	; (8011728 <HAL_RCC_ClockConfig+0x1c8>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	4618      	mov	r0, r3
 8011708:	f7ff f9ac 	bl	8010a64 <HAL_InitTick>

  return HAL_OK;
 801170c:	2300      	movs	r3, #0
}
 801170e:	4618      	mov	r0, r3
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
 8011716:	bf00      	nop
 8011718:	40023c00 	.word	0x40023c00
 801171c:	40023800 	.word	0x40023800
 8011720:	08012a24 	.word	0x08012a24
 8011724:	20000000 	.word	0x20000000
 8011728:	20000004 	.word	0x20000004

0801172c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801172c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011730:	b090      	sub	sp, #64	; 0x40
 8011732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011734:	2300      	movs	r3, #0
 8011736:	637b      	str	r3, [r7, #52]	; 0x34
 8011738:	2300      	movs	r3, #0
 801173a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801173c:	2300      	movs	r3, #0
 801173e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8011740:	2300      	movs	r3, #0
 8011742:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011744:	4b59      	ldr	r3, [pc, #356]	; (80118ac <HAL_RCC_GetSysClockFreq+0x180>)
 8011746:	689b      	ldr	r3, [r3, #8]
 8011748:	f003 030c 	and.w	r3, r3, #12
 801174c:	2b08      	cmp	r3, #8
 801174e:	d00d      	beq.n	801176c <HAL_RCC_GetSysClockFreq+0x40>
 8011750:	2b08      	cmp	r3, #8
 8011752:	f200 80a2 	bhi.w	801189a <HAL_RCC_GetSysClockFreq+0x16e>
 8011756:	2b00      	cmp	r3, #0
 8011758:	d002      	beq.n	8011760 <HAL_RCC_GetSysClockFreq+0x34>
 801175a:	2b04      	cmp	r3, #4
 801175c:	d003      	beq.n	8011766 <HAL_RCC_GetSysClockFreq+0x3a>
 801175e:	e09c      	b.n	801189a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011760:	4b53      	ldr	r3, [pc, #332]	; (80118b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8011762:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8011764:	e09c      	b.n	80118a0 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011766:	4b53      	ldr	r3, [pc, #332]	; (80118b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8011768:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801176a:	e099      	b.n	80118a0 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801176c:	4b4f      	ldr	r3, [pc, #316]	; (80118ac <HAL_RCC_GetSysClockFreq+0x180>)
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011774:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011776:	4b4d      	ldr	r3, [pc, #308]	; (80118ac <HAL_RCC_GetSysClockFreq+0x180>)
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801177e:	2b00      	cmp	r3, #0
 8011780:	d027      	beq.n	80117d2 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011782:	4b4a      	ldr	r3, [pc, #296]	; (80118ac <HAL_RCC_GetSysClockFreq+0x180>)
 8011784:	685b      	ldr	r3, [r3, #4]
 8011786:	099b      	lsrs	r3, r3, #6
 8011788:	2200      	movs	r2, #0
 801178a:	623b      	str	r3, [r7, #32]
 801178c:	627a      	str	r2, [r7, #36]	; 0x24
 801178e:	6a3b      	ldr	r3, [r7, #32]
 8011790:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8011794:	2100      	movs	r1, #0
 8011796:	4b47      	ldr	r3, [pc, #284]	; (80118b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8011798:	fb03 f201 	mul.w	r2, r3, r1
 801179c:	2300      	movs	r3, #0
 801179e:	fb00 f303 	mul.w	r3, r0, r3
 80117a2:	4413      	add	r3, r2
 80117a4:	4a43      	ldr	r2, [pc, #268]	; (80118b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80117a6:	fba0 2102 	umull	r2, r1, r0, r2
 80117aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80117ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80117ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117b0:	4413      	add	r3, r2
 80117b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117b6:	2200      	movs	r2, #0
 80117b8:	61bb      	str	r3, [r7, #24]
 80117ba:	61fa      	str	r2, [r7, #28]
 80117bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80117c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80117c4:	f7fe fd5c 	bl	8010280 <__aeabi_uldivmod>
 80117c8:	4602      	mov	r2, r0
 80117ca:	460b      	mov	r3, r1
 80117cc:	4613      	mov	r3, r2
 80117ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117d0:	e055      	b.n	801187e <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80117d2:	4b36      	ldr	r3, [pc, #216]	; (80118ac <HAL_RCC_GetSysClockFreq+0x180>)
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	099b      	lsrs	r3, r3, #6
 80117d8:	2200      	movs	r2, #0
 80117da:	613b      	str	r3, [r7, #16]
 80117dc:	617a      	str	r2, [r7, #20]
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80117e4:	f04f 0b00 	mov.w	fp, #0
 80117e8:	4652      	mov	r2, sl
 80117ea:	465b      	mov	r3, fp
 80117ec:	f04f 0000 	mov.w	r0, #0
 80117f0:	f04f 0100 	mov.w	r1, #0
 80117f4:	0159      	lsls	r1, r3, #5
 80117f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80117fa:	0150      	lsls	r0, r2, #5
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	ebb2 080a 	subs.w	r8, r2, sl
 8011804:	eb63 090b 	sbc.w	r9, r3, fp
 8011808:	f04f 0200 	mov.w	r2, #0
 801180c:	f04f 0300 	mov.w	r3, #0
 8011810:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8011814:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8011818:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801181c:	ebb2 0408 	subs.w	r4, r2, r8
 8011820:	eb63 0509 	sbc.w	r5, r3, r9
 8011824:	f04f 0200 	mov.w	r2, #0
 8011828:	f04f 0300 	mov.w	r3, #0
 801182c:	00eb      	lsls	r3, r5, #3
 801182e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011832:	00e2      	lsls	r2, r4, #3
 8011834:	4614      	mov	r4, r2
 8011836:	461d      	mov	r5, r3
 8011838:	eb14 030a 	adds.w	r3, r4, sl
 801183c:	603b      	str	r3, [r7, #0]
 801183e:	eb45 030b 	adc.w	r3, r5, fp
 8011842:	607b      	str	r3, [r7, #4]
 8011844:	f04f 0200 	mov.w	r2, #0
 8011848:	f04f 0300 	mov.w	r3, #0
 801184c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011850:	4629      	mov	r1, r5
 8011852:	028b      	lsls	r3, r1, #10
 8011854:	4620      	mov	r0, r4
 8011856:	4629      	mov	r1, r5
 8011858:	4604      	mov	r4, r0
 801185a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 801185e:	4601      	mov	r1, r0
 8011860:	028a      	lsls	r2, r1, #10
 8011862:	4610      	mov	r0, r2
 8011864:	4619      	mov	r1, r3
 8011866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011868:	2200      	movs	r2, #0
 801186a:	60bb      	str	r3, [r7, #8]
 801186c:	60fa      	str	r2, [r7, #12]
 801186e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011872:	f7fe fd05 	bl	8010280 <__aeabi_uldivmod>
 8011876:	4602      	mov	r2, r0
 8011878:	460b      	mov	r3, r1
 801187a:	4613      	mov	r3, r2
 801187c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801187e:	4b0b      	ldr	r3, [pc, #44]	; (80118ac <HAL_RCC_GetSysClockFreq+0x180>)
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	0c1b      	lsrs	r3, r3, #16
 8011884:	f003 0303 	and.w	r3, r3, #3
 8011888:	3301      	adds	r3, #1
 801188a:	005b      	lsls	r3, r3, #1
 801188c:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 801188e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011892:	fbb2 f3f3 	udiv	r3, r2, r3
 8011896:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8011898:	e002      	b.n	80118a0 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801189a:	4b05      	ldr	r3, [pc, #20]	; (80118b0 <HAL_RCC_GetSysClockFreq+0x184>)
 801189c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801189e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80118a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3740      	adds	r7, #64	; 0x40
 80118a6:	46bd      	mov	sp, r7
 80118a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80118ac:	40023800 	.word	0x40023800
 80118b0:	00f42400 	.word	0x00f42400
 80118b4:	017d7840 	.word	0x017d7840

080118b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80118b8:	b480      	push	{r7}
 80118ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80118bc:	4b02      	ldr	r3, [pc, #8]	; (80118c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80118be:	681b      	ldr	r3, [r3, #0]
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bc80      	pop	{r7}
 80118c6:	4770      	bx	lr
 80118c8:	20000000 	.word	0x20000000

080118cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80118d0:	f7ff fff2 	bl	80118b8 <HAL_RCC_GetHCLKFreq>
 80118d4:	4602      	mov	r2, r0
 80118d6:	4b05      	ldr	r3, [pc, #20]	; (80118ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80118d8:	689b      	ldr	r3, [r3, #8]
 80118da:	0a9b      	lsrs	r3, r3, #10
 80118dc:	f003 0307 	and.w	r3, r3, #7
 80118e0:	4903      	ldr	r1, [pc, #12]	; (80118f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80118e2:	5ccb      	ldrb	r3, [r1, r3]
 80118e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	40023800 	.word	0x40023800
 80118f0:	08012a34 	.word	0x08012a34

080118f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80118f8:	f7ff ffde 	bl	80118b8 <HAL_RCC_GetHCLKFreq>
 80118fc:	4602      	mov	r2, r0
 80118fe:	4b05      	ldr	r3, [pc, #20]	; (8011914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011900:	689b      	ldr	r3, [r3, #8]
 8011902:	0b5b      	lsrs	r3, r3, #13
 8011904:	f003 0307 	and.w	r3, r3, #7
 8011908:	4903      	ldr	r1, [pc, #12]	; (8011918 <HAL_RCC_GetPCLK2Freq+0x24>)
 801190a:	5ccb      	ldrb	r3, [r1, r3]
 801190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011910:	4618      	mov	r0, r3
 8011912:	bd80      	pop	{r7, pc}
 8011914:	40023800 	.word	0x40023800
 8011918:	08012a34 	.word	0x08012a34

0801191c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d101      	bne.n	801192e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801192a:	2301      	movs	r3, #1
 801192c:	e03f      	b.n	80119ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011934:	b2db      	uxtb	r3, r3
 8011936:	2b00      	cmp	r3, #0
 8011938:	d106      	bne.n	8011948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2200      	movs	r2, #0
 801193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7fe ff8e 	bl	8010864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2224      	movs	r2, #36	; 0x24
 801194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	68da      	ldr	r2, [r3, #12]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801195e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f000 f929 	bl	8011bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	691a      	ldr	r2, [r3, #16]
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	695a      	ldr	r2, [r3, #20]
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	68da      	ldr	r2, [r3, #12]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2200      	movs	r2, #0
 801199a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2220      	movs	r2, #32
 80119a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2220      	movs	r2, #32
 80119a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80119ac:	2300      	movs	r3, #0
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3708      	adds	r7, #8
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b08a      	sub	sp, #40	; 0x28
 80119ba:	af02      	add	r7, sp, #8
 80119bc:	60f8      	str	r0, [r7, #12]
 80119be:	60b9      	str	r1, [r7, #8]
 80119c0:	603b      	str	r3, [r7, #0]
 80119c2:	4613      	mov	r3, r2
 80119c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80119c6:	2300      	movs	r3, #0
 80119c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80119d0:	b2db      	uxtb	r3, r3
 80119d2:	2b20      	cmp	r3, #32
 80119d4:	d17c      	bne.n	8011ad0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d002      	beq.n	80119e2 <HAL_UART_Transmit+0x2c>
 80119dc:	88fb      	ldrh	r3, [r7, #6]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d101      	bne.n	80119e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80119e2:	2301      	movs	r3, #1
 80119e4:	e075      	b.n	8011ad2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d101      	bne.n	80119f4 <HAL_UART_Transmit+0x3e>
 80119f0:	2302      	movs	r3, #2
 80119f2:	e06e      	b.n	8011ad2 <HAL_UART_Transmit+0x11c>
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2201      	movs	r2, #1
 80119f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	2200      	movs	r2, #0
 8011a00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	2221      	movs	r2, #33	; 0x21
 8011a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011a0a:	f7ff f86d 	bl	8010ae8 <HAL_GetTick>
 8011a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	88fa      	ldrh	r2, [r7, #6]
 8011a14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	88fa      	ldrh	r2, [r7, #6]
 8011a1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	689b      	ldr	r3, [r3, #8]
 8011a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a24:	d108      	bne.n	8011a38 <HAL_UART_Transmit+0x82>
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	691b      	ldr	r3, [r3, #16]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d104      	bne.n	8011a38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	61bb      	str	r3, [r7, #24]
 8011a36:	e003      	b.n	8011a40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2200      	movs	r2, #0
 8011a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8011a48:	e02a      	b.n	8011aa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	9300      	str	r3, [sp, #0]
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	2200      	movs	r2, #0
 8011a52:	2180      	movs	r1, #128	; 0x80
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f000 f840 	bl	8011ada <UART_WaitOnFlagUntilTimeout>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d001      	beq.n	8011a64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8011a60:	2303      	movs	r3, #3
 8011a62:	e036      	b.n	8011ad2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d10b      	bne.n	8011a82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011a6a:	69bb      	ldr	r3, [r7, #24]
 8011a6c:	881b      	ldrh	r3, [r3, #0]
 8011a6e:	461a      	mov	r2, r3
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011a78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	3302      	adds	r3, #2
 8011a7e:	61bb      	str	r3, [r7, #24]
 8011a80:	e007      	b.n	8011a92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8011a82:	69fb      	ldr	r3, [r7, #28]
 8011a84:	781a      	ldrb	r2, [r3, #0]
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011a96:	b29b      	uxth	r3, r3
 8011a98:	3b01      	subs	r3, #1
 8011a9a:	b29a      	uxth	r2, r3
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d1cf      	bne.n	8011a4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	2140      	movs	r1, #64	; 0x40
 8011ab4:	68f8      	ldr	r0, [r7, #12]
 8011ab6:	f000 f810 	bl	8011ada <UART_WaitOnFlagUntilTimeout>
 8011aba:	4603      	mov	r3, r0
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d001      	beq.n	8011ac4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8011ac0:	2303      	movs	r3, #3
 8011ac2:	e006      	b.n	8011ad2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2220      	movs	r2, #32
 8011ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8011acc:	2300      	movs	r3, #0
 8011ace:	e000      	b.n	8011ad2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8011ad0:	2302      	movs	r3, #2
  }
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3720      	adds	r7, #32
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}

08011ada <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011ada:	b580      	push	{r7, lr}
 8011adc:	b090      	sub	sp, #64	; 0x40
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	60f8      	str	r0, [r7, #12]
 8011ae2:	60b9      	str	r1, [r7, #8]
 8011ae4:	603b      	str	r3, [r7, #0]
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011aea:	e050      	b.n	8011b8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011af2:	d04c      	beq.n	8011b8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d007      	beq.n	8011b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8011afa:	f7fe fff5 	bl	8010ae8 <HAL_GetTick>
 8011afe:	4602      	mov	r2, r0
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	1ad3      	subs	r3, r2, r3
 8011b04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d241      	bcs.n	8011b8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	330c      	adds	r3, #12
 8011b10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b14:	e853 3f00 	ldrex	r3, [r3]
 8011b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	330c      	adds	r3, #12
 8011b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b2a:	637a      	str	r2, [r7, #52]	; 0x34
 8011b2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b32:	e841 2300 	strex	r3, r2, [r1]
 8011b36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d1e5      	bne.n	8011b0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	3314      	adds	r3, #20
 8011b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	e853 3f00 	ldrex	r3, [r3]
 8011b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	f023 0301 	bic.w	r3, r3, #1
 8011b54:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	3314      	adds	r3, #20
 8011b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b5e:	623a      	str	r2, [r7, #32]
 8011b60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b62:	69f9      	ldr	r1, [r7, #28]
 8011b64:	6a3a      	ldr	r2, [r7, #32]
 8011b66:	e841 2300 	strex	r3, r2, [r1]
 8011b6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1e5      	bne.n	8011b3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2220      	movs	r2, #32
 8011b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2220      	movs	r2, #32
 8011b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	2200      	movs	r2, #0
 8011b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8011b8a:	2303      	movs	r3, #3
 8011b8c:	e00f      	b.n	8011bae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	681a      	ldr	r2, [r3, #0]
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	4013      	ands	r3, r2
 8011b98:	68ba      	ldr	r2, [r7, #8]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	bf0c      	ite	eq
 8011b9e:	2301      	moveq	r3, #1
 8011ba0:	2300      	movne	r3, #0
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	461a      	mov	r2, r3
 8011ba6:	79fb      	ldrb	r3, [r7, #7]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d09f      	beq.n	8011aec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011bac:	2300      	movs	r3, #0
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3740      	adds	r7, #64	; 0x40
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
	...

08011bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011bbc:	b0c0      	sub	sp, #256	; 0x100
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	691b      	ldr	r3, [r3, #16]
 8011bcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bd4:	68d9      	ldr	r1, [r3, #12]
 8011bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bda:	681a      	ldr	r2, [r3, #0]
 8011bdc:	ea40 0301 	orr.w	r3, r0, r1
 8011be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011be6:	689a      	ldr	r2, [r3, #8]
 8011be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bec:	691b      	ldr	r3, [r3, #16]
 8011bee:	431a      	orrs	r2, r3
 8011bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bf4:	695b      	ldr	r3, [r3, #20]
 8011bf6:	431a      	orrs	r2, r3
 8011bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bfc:	69db      	ldr	r3, [r3, #28]
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	68db      	ldr	r3, [r3, #12]
 8011c0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011c10:	f021 010c 	bic.w	r1, r1, #12
 8011c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c18:	681a      	ldr	r2, [r3, #0]
 8011c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011c1e:	430b      	orrs	r3, r1
 8011c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	695b      	ldr	r3, [r3, #20]
 8011c2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8011c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c32:	6999      	ldr	r1, [r3, #24]
 8011c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	ea40 0301 	orr.w	r3, r0, r1
 8011c3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	4b91      	ldr	r3, [pc, #580]	; (8011e8c <UART_SetConfig+0x2d4>)
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d005      	beq.n	8011c58 <UART_SetConfig+0xa0>
 8011c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c50:	681a      	ldr	r2, [r3, #0]
 8011c52:	4b8f      	ldr	r3, [pc, #572]	; (8011e90 <UART_SetConfig+0x2d8>)
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d104      	bne.n	8011c62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011c58:	f7ff fe4c 	bl	80118f4 <HAL_RCC_GetPCLK2Freq>
 8011c5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8011c60:	e003      	b.n	8011c6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011c62:	f7ff fe33 	bl	80118cc <HAL_RCC_GetPCLK1Freq>
 8011c66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c6e:	69db      	ldr	r3, [r3, #28]
 8011c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c74:	f040 8110 	bne.w	8011e98 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011c82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011c86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8011c8a:	4622      	mov	r2, r4
 8011c8c:	462b      	mov	r3, r5
 8011c8e:	1891      	adds	r1, r2, r2
 8011c90:	65b9      	str	r1, [r7, #88]	; 0x58
 8011c92:	415b      	adcs	r3, r3
 8011c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011c96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	4629      	mov	r1, r5
 8011c9e:	4604      	mov	r4, r0
 8011ca0:	eb12 0804 	adds.w	r8, r2, r4
 8011ca4:	460c      	mov	r4, r1
 8011ca6:	eb43 0904 	adc.w	r9, r3, r4
 8011caa:	f04f 0200 	mov.w	r2, #0
 8011cae:	f04f 0300 	mov.w	r3, #0
 8011cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011cbe:	4690      	mov	r8, r2
 8011cc0:	4699      	mov	r9, r3
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	eb18 0303 	adds.w	r3, r8, r3
 8011cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011ccc:	460b      	mov	r3, r1
 8011cce:	eb49 0303 	adc.w	r3, r9, r3
 8011cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	2200      	movs	r2, #0
 8011cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011ce2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8011ce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011cea:	460b      	mov	r3, r1
 8011cec:	18db      	adds	r3, r3, r3
 8011cee:	653b      	str	r3, [r7, #80]	; 0x50
 8011cf0:	4613      	mov	r3, r2
 8011cf2:	eb42 0303 	adc.w	r3, r2, r3
 8011cf6:	657b      	str	r3, [r7, #84]	; 0x54
 8011cf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011cfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8011d00:	f7fe fabe 	bl	8010280 <__aeabi_uldivmod>
 8011d04:	4602      	mov	r2, r0
 8011d06:	460b      	mov	r3, r1
 8011d08:	4b62      	ldr	r3, [pc, #392]	; (8011e94 <UART_SetConfig+0x2dc>)
 8011d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8011d0e:	095b      	lsrs	r3, r3, #5
 8011d10:	011c      	lsls	r4, r3, #4
 8011d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011d16:	2200      	movs	r2, #0
 8011d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011d1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8011d20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8011d24:	4642      	mov	r2, r8
 8011d26:	464b      	mov	r3, r9
 8011d28:	1891      	adds	r1, r2, r2
 8011d2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8011d2c:	415b      	adcs	r3, r3
 8011d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8011d34:	4645      	mov	r5, r8
 8011d36:	eb12 0a05 	adds.w	sl, r2, r5
 8011d3a:	4640      	mov	r0, r8
 8011d3c:	4649      	mov	r1, r9
 8011d3e:	460d      	mov	r5, r1
 8011d40:	eb43 0b05 	adc.w	fp, r3, r5
 8011d44:	f04f 0200 	mov.w	r2, #0
 8011d48:	f04f 0300 	mov.w	r3, #0
 8011d4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011d50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011d54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011d58:	4692      	mov	sl, r2
 8011d5a:	469b      	mov	fp, r3
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	eb1a 0303 	adds.w	r3, sl, r3
 8011d62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011d66:	460b      	mov	r3, r1
 8011d68:	eb4b 0303 	adc.w	r3, fp, r3
 8011d6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	2200      	movs	r2, #0
 8011d78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011d7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011d80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8011d84:	460b      	mov	r3, r1
 8011d86:	18db      	adds	r3, r3, r3
 8011d88:	643b      	str	r3, [r7, #64]	; 0x40
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	eb42 0303 	adc.w	r3, r2, r3
 8011d90:	647b      	str	r3, [r7, #68]	; 0x44
 8011d92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011d96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011d9a:	f7fe fa71 	bl	8010280 <__aeabi_uldivmod>
 8011d9e:	4602      	mov	r2, r0
 8011da0:	460b      	mov	r3, r1
 8011da2:	4611      	mov	r1, r2
 8011da4:	4b3b      	ldr	r3, [pc, #236]	; (8011e94 <UART_SetConfig+0x2dc>)
 8011da6:	fba3 2301 	umull	r2, r3, r3, r1
 8011daa:	095b      	lsrs	r3, r3, #5
 8011dac:	2264      	movs	r2, #100	; 0x64
 8011dae:	fb02 f303 	mul.w	r3, r2, r3
 8011db2:	1acb      	subs	r3, r1, r3
 8011db4:	00db      	lsls	r3, r3, #3
 8011db6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011dba:	4b36      	ldr	r3, [pc, #216]	; (8011e94 <UART_SetConfig+0x2dc>)
 8011dbc:	fba3 2302 	umull	r2, r3, r3, r2
 8011dc0:	095b      	lsrs	r3, r3, #5
 8011dc2:	005b      	lsls	r3, r3, #1
 8011dc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011dc8:	441c      	add	r4, r3
 8011dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011dce:	2200      	movs	r2, #0
 8011dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011dd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011dd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8011ddc:	4642      	mov	r2, r8
 8011dde:	464b      	mov	r3, r9
 8011de0:	1891      	adds	r1, r2, r2
 8011de2:	63b9      	str	r1, [r7, #56]	; 0x38
 8011de4:	415b      	adcs	r3, r3
 8011de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011de8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011dec:	4641      	mov	r1, r8
 8011dee:	1851      	adds	r1, r2, r1
 8011df0:	6339      	str	r1, [r7, #48]	; 0x30
 8011df2:	4649      	mov	r1, r9
 8011df4:	414b      	adcs	r3, r1
 8011df6:	637b      	str	r3, [r7, #52]	; 0x34
 8011df8:	f04f 0200 	mov.w	r2, #0
 8011dfc:	f04f 0300 	mov.w	r3, #0
 8011e00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8011e04:	4659      	mov	r1, fp
 8011e06:	00cb      	lsls	r3, r1, #3
 8011e08:	4655      	mov	r5, sl
 8011e0a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8011e0e:	4651      	mov	r1, sl
 8011e10:	00ca      	lsls	r2, r1, #3
 8011e12:	4610      	mov	r0, r2
 8011e14:	4619      	mov	r1, r3
 8011e16:	4603      	mov	r3, r0
 8011e18:	4642      	mov	r2, r8
 8011e1a:	189b      	adds	r3, r3, r2
 8011e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011e20:	464b      	mov	r3, r9
 8011e22:	460a      	mov	r2, r1
 8011e24:	eb42 0303 	adc.w	r3, r2, r3
 8011e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	2200      	movs	r2, #0
 8011e34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011e38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8011e3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8011e40:	460b      	mov	r3, r1
 8011e42:	18db      	adds	r3, r3, r3
 8011e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e46:	4613      	mov	r3, r2
 8011e48:	eb42 0303 	adc.w	r3, r2, r3
 8011e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011e52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8011e56:	f7fe fa13 	bl	8010280 <__aeabi_uldivmod>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	4b0d      	ldr	r3, [pc, #52]	; (8011e94 <UART_SetConfig+0x2dc>)
 8011e60:	fba3 1302 	umull	r1, r3, r3, r2
 8011e64:	095b      	lsrs	r3, r3, #5
 8011e66:	2164      	movs	r1, #100	; 0x64
 8011e68:	fb01 f303 	mul.w	r3, r1, r3
 8011e6c:	1ad3      	subs	r3, r2, r3
 8011e6e:	00db      	lsls	r3, r3, #3
 8011e70:	3332      	adds	r3, #50	; 0x32
 8011e72:	4a08      	ldr	r2, [pc, #32]	; (8011e94 <UART_SetConfig+0x2dc>)
 8011e74:	fba2 2303 	umull	r2, r3, r2, r3
 8011e78:	095b      	lsrs	r3, r3, #5
 8011e7a:	f003 0207 	and.w	r2, r3, #7
 8011e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	4422      	add	r2, r4
 8011e86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011e88:	e109      	b.n	801209e <UART_SetConfig+0x4e6>
 8011e8a:	bf00      	nop
 8011e8c:	40011000 	.word	0x40011000
 8011e90:	40011400 	.word	0x40011400
 8011e94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011ea2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011ea6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8011eaa:	4642      	mov	r2, r8
 8011eac:	464b      	mov	r3, r9
 8011eae:	1891      	adds	r1, r2, r2
 8011eb0:	6239      	str	r1, [r7, #32]
 8011eb2:	415b      	adcs	r3, r3
 8011eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8011eb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011eba:	4641      	mov	r1, r8
 8011ebc:	1854      	adds	r4, r2, r1
 8011ebe:	46cc      	mov	ip, r9
 8011ec0:	eb43 050c 	adc.w	r5, r3, ip
 8011ec4:	f04f 0200 	mov.w	r2, #0
 8011ec8:	f04f 0300 	mov.w	r3, #0
 8011ecc:	00eb      	lsls	r3, r5, #3
 8011ece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011ed2:	00e2      	lsls	r2, r4, #3
 8011ed4:	4614      	mov	r4, r2
 8011ed6:	461d      	mov	r5, r3
 8011ed8:	4640      	mov	r0, r8
 8011eda:	4649      	mov	r1, r9
 8011edc:	4603      	mov	r3, r0
 8011ede:	18e3      	adds	r3, r4, r3
 8011ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011ee4:	460b      	mov	r3, r1
 8011ee6:	eb45 0303 	adc.w	r3, r5, r3
 8011eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011efe:	f04f 0200 	mov.w	r2, #0
 8011f02:	f04f 0300 	mov.w	r3, #0
 8011f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8011f0a:	4629      	mov	r1, r5
 8011f0c:	008b      	lsls	r3, r1, #2
 8011f0e:	4620      	mov	r0, r4
 8011f10:	4629      	mov	r1, r5
 8011f12:	4604      	mov	r4, r0
 8011f14:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8011f18:	4601      	mov	r1, r0
 8011f1a:	008a      	lsls	r2, r1, #2
 8011f1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8011f20:	f7fe f9ae 	bl	8010280 <__aeabi_uldivmod>
 8011f24:	4602      	mov	r2, r0
 8011f26:	460b      	mov	r3, r1
 8011f28:	4b60      	ldr	r3, [pc, #384]	; (80120ac <UART_SetConfig+0x4f4>)
 8011f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8011f2e:	095b      	lsrs	r3, r3, #5
 8011f30:	011c      	lsls	r4, r3, #4
 8011f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011f36:	2200      	movs	r2, #0
 8011f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011f3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011f40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8011f44:	4642      	mov	r2, r8
 8011f46:	464b      	mov	r3, r9
 8011f48:	1891      	adds	r1, r2, r2
 8011f4a:	61b9      	str	r1, [r7, #24]
 8011f4c:	415b      	adcs	r3, r3
 8011f4e:	61fb      	str	r3, [r7, #28]
 8011f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011f54:	4641      	mov	r1, r8
 8011f56:	1851      	adds	r1, r2, r1
 8011f58:	6139      	str	r1, [r7, #16]
 8011f5a:	4649      	mov	r1, r9
 8011f5c:	414b      	adcs	r3, r1
 8011f5e:	617b      	str	r3, [r7, #20]
 8011f60:	f04f 0200 	mov.w	r2, #0
 8011f64:	f04f 0300 	mov.w	r3, #0
 8011f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011f6c:	4659      	mov	r1, fp
 8011f6e:	00cb      	lsls	r3, r1, #3
 8011f70:	4655      	mov	r5, sl
 8011f72:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8011f76:	4651      	mov	r1, sl
 8011f78:	00ca      	lsls	r2, r1, #3
 8011f7a:	4610      	mov	r0, r2
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	4603      	mov	r3, r0
 8011f80:	4642      	mov	r2, r8
 8011f82:	189b      	adds	r3, r3, r2
 8011f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f88:	464b      	mov	r3, r9
 8011f8a:	460a      	mov	r2, r1
 8011f8c:	eb42 0303 	adc.w	r3, r2, r3
 8011f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8011f9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011fa0:	f04f 0200 	mov.w	r2, #0
 8011fa4:	f04f 0300 	mov.w	r3, #0
 8011fa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8011fac:	4649      	mov	r1, r9
 8011fae:	008b      	lsls	r3, r1, #2
 8011fb0:	4645      	mov	r5, r8
 8011fb2:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8011fb6:	4641      	mov	r1, r8
 8011fb8:	008a      	lsls	r2, r1, #2
 8011fba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8011fbe:	f7fe f95f 	bl	8010280 <__aeabi_uldivmod>
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	4b39      	ldr	r3, [pc, #228]	; (80120ac <UART_SetConfig+0x4f4>)
 8011fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8011fcc:	095b      	lsrs	r3, r3, #5
 8011fce:	2164      	movs	r1, #100	; 0x64
 8011fd0:	fb01 f303 	mul.w	r3, r1, r3
 8011fd4:	1ad3      	subs	r3, r2, r3
 8011fd6:	011b      	lsls	r3, r3, #4
 8011fd8:	3332      	adds	r3, #50	; 0x32
 8011fda:	4a34      	ldr	r2, [pc, #208]	; (80120ac <UART_SetConfig+0x4f4>)
 8011fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8011fe0:	095b      	lsrs	r3, r3, #5
 8011fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011fe6:	441c      	add	r4, r3
 8011fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011fec:	2200      	movs	r2, #0
 8011fee:	673b      	str	r3, [r7, #112]	; 0x70
 8011ff0:	677a      	str	r2, [r7, #116]	; 0x74
 8011ff2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011ff6:	4642      	mov	r2, r8
 8011ff8:	464b      	mov	r3, r9
 8011ffa:	1891      	adds	r1, r2, r2
 8011ffc:	60b9      	str	r1, [r7, #8]
 8011ffe:	415b      	adcs	r3, r3
 8012000:	60fb      	str	r3, [r7, #12]
 8012002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012006:	4641      	mov	r1, r8
 8012008:	1851      	adds	r1, r2, r1
 801200a:	6039      	str	r1, [r7, #0]
 801200c:	4649      	mov	r1, r9
 801200e:	414b      	adcs	r3, r1
 8012010:	607b      	str	r3, [r7, #4]
 8012012:	f04f 0200 	mov.w	r2, #0
 8012016:	f04f 0300 	mov.w	r3, #0
 801201a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801201e:	4659      	mov	r1, fp
 8012020:	00cb      	lsls	r3, r1, #3
 8012022:	4655      	mov	r5, sl
 8012024:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8012028:	4651      	mov	r1, sl
 801202a:	00ca      	lsls	r2, r1, #3
 801202c:	4610      	mov	r0, r2
 801202e:	4619      	mov	r1, r3
 8012030:	4603      	mov	r3, r0
 8012032:	4642      	mov	r2, r8
 8012034:	189b      	adds	r3, r3, r2
 8012036:	66bb      	str	r3, [r7, #104]	; 0x68
 8012038:	464b      	mov	r3, r9
 801203a:	460a      	mov	r2, r1
 801203c:	eb42 0303 	adc.w	r3, r2, r3
 8012040:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	2200      	movs	r2, #0
 801204a:	663b      	str	r3, [r7, #96]	; 0x60
 801204c:	667a      	str	r2, [r7, #100]	; 0x64
 801204e:	f04f 0200 	mov.w	r2, #0
 8012052:	f04f 0300 	mov.w	r3, #0
 8012056:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801205a:	4649      	mov	r1, r9
 801205c:	008b      	lsls	r3, r1, #2
 801205e:	4645      	mov	r5, r8
 8012060:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8012064:	4641      	mov	r1, r8
 8012066:	008a      	lsls	r2, r1, #2
 8012068:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801206c:	f7fe f908 	bl	8010280 <__aeabi_uldivmod>
 8012070:	4602      	mov	r2, r0
 8012072:	460b      	mov	r3, r1
 8012074:	4b0d      	ldr	r3, [pc, #52]	; (80120ac <UART_SetConfig+0x4f4>)
 8012076:	fba3 1302 	umull	r1, r3, r3, r2
 801207a:	095b      	lsrs	r3, r3, #5
 801207c:	2164      	movs	r1, #100	; 0x64
 801207e:	fb01 f303 	mul.w	r3, r1, r3
 8012082:	1ad3      	subs	r3, r2, r3
 8012084:	011b      	lsls	r3, r3, #4
 8012086:	3332      	adds	r3, #50	; 0x32
 8012088:	4a08      	ldr	r2, [pc, #32]	; (80120ac <UART_SetConfig+0x4f4>)
 801208a:	fba2 2303 	umull	r2, r3, r2, r3
 801208e:	095b      	lsrs	r3, r3, #5
 8012090:	f003 020f 	and.w	r2, r3, #15
 8012094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	4422      	add	r2, r4
 801209c:	609a      	str	r2, [r3, #8]
}
 801209e:	bf00      	nop
 80120a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80120a4:	46bd      	mov	sp, r7
 80120a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80120aa:	bf00      	nop
 80120ac:	51eb851f 	.word	0x51eb851f

080120b0 <__errno>:
 80120b0:	4b01      	ldr	r3, [pc, #4]	; (80120b8 <__errno+0x8>)
 80120b2:	6818      	ldr	r0, [r3, #0]
 80120b4:	4770      	bx	lr
 80120b6:	bf00      	nop
 80120b8:	2000000c 	.word	0x2000000c

080120bc <__libc_init_array>:
 80120bc:	b570      	push	{r4, r5, r6, lr}
 80120be:	4d0d      	ldr	r5, [pc, #52]	; (80120f4 <__libc_init_array+0x38>)
 80120c0:	4c0d      	ldr	r4, [pc, #52]	; (80120f8 <__libc_init_array+0x3c>)
 80120c2:	1b64      	subs	r4, r4, r5
 80120c4:	10a4      	asrs	r4, r4, #2
 80120c6:	2600      	movs	r6, #0
 80120c8:	42a6      	cmp	r6, r4
 80120ca:	d109      	bne.n	80120e0 <__libc_init_array+0x24>
 80120cc:	4d0b      	ldr	r5, [pc, #44]	; (80120fc <__libc_init_array+0x40>)
 80120ce:	4c0c      	ldr	r4, [pc, #48]	; (8012100 <__libc_init_array+0x44>)
 80120d0:	f000 fc8c 	bl	80129ec <_init>
 80120d4:	1b64      	subs	r4, r4, r5
 80120d6:	10a4      	asrs	r4, r4, #2
 80120d8:	2600      	movs	r6, #0
 80120da:	42a6      	cmp	r6, r4
 80120dc:	d105      	bne.n	80120ea <__libc_init_array+0x2e>
 80120de:	bd70      	pop	{r4, r5, r6, pc}
 80120e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80120e4:	4798      	blx	r3
 80120e6:	3601      	adds	r6, #1
 80120e8:	e7ee      	b.n	80120c8 <__libc_init_array+0xc>
 80120ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80120ee:	4798      	blx	r3
 80120f0:	3601      	adds	r6, #1
 80120f2:	e7f2      	b.n	80120da <__libc_init_array+0x1e>
 80120f4:	08012a78 	.word	0x08012a78
 80120f8:	08012a78 	.word	0x08012a78
 80120fc:	08012a78 	.word	0x08012a78
 8012100:	08012a7c 	.word	0x08012a7c

08012104 <memset>:
 8012104:	4402      	add	r2, r0
 8012106:	4603      	mov	r3, r0
 8012108:	4293      	cmp	r3, r2
 801210a:	d100      	bne.n	801210e <memset+0xa>
 801210c:	4770      	bx	lr
 801210e:	f803 1b01 	strb.w	r1, [r3], #1
 8012112:	e7f9      	b.n	8012108 <memset+0x4>

08012114 <_vsiprintf_r>:
 8012114:	b500      	push	{lr}
 8012116:	b09b      	sub	sp, #108	; 0x6c
 8012118:	9100      	str	r1, [sp, #0]
 801211a:	9104      	str	r1, [sp, #16]
 801211c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012120:	9105      	str	r1, [sp, #20]
 8012122:	9102      	str	r1, [sp, #8]
 8012124:	4905      	ldr	r1, [pc, #20]	; (801213c <_vsiprintf_r+0x28>)
 8012126:	9103      	str	r1, [sp, #12]
 8012128:	4669      	mov	r1, sp
 801212a:	f000 f86f 	bl	801220c <_svfiprintf_r>
 801212e:	9b00      	ldr	r3, [sp, #0]
 8012130:	2200      	movs	r2, #0
 8012132:	701a      	strb	r2, [r3, #0]
 8012134:	b01b      	add	sp, #108	; 0x6c
 8012136:	f85d fb04 	ldr.w	pc, [sp], #4
 801213a:	bf00      	nop
 801213c:	ffff0208 	.word	0xffff0208

08012140 <vsiprintf>:
 8012140:	4613      	mov	r3, r2
 8012142:	460a      	mov	r2, r1
 8012144:	4601      	mov	r1, r0
 8012146:	4802      	ldr	r0, [pc, #8]	; (8012150 <vsiprintf+0x10>)
 8012148:	6800      	ldr	r0, [r0, #0]
 801214a:	f7ff bfe3 	b.w	8012114 <_vsiprintf_r>
 801214e:	bf00      	nop
 8012150:	2000000c 	.word	0x2000000c

08012154 <__ssputs_r>:
 8012154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012158:	688e      	ldr	r6, [r1, #8]
 801215a:	429e      	cmp	r6, r3
 801215c:	4682      	mov	sl, r0
 801215e:	460c      	mov	r4, r1
 8012160:	4690      	mov	r8, r2
 8012162:	461f      	mov	r7, r3
 8012164:	d838      	bhi.n	80121d8 <__ssputs_r+0x84>
 8012166:	898a      	ldrh	r2, [r1, #12]
 8012168:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801216c:	d032      	beq.n	80121d4 <__ssputs_r+0x80>
 801216e:	6825      	ldr	r5, [r4, #0]
 8012170:	6909      	ldr	r1, [r1, #16]
 8012172:	eba5 0901 	sub.w	r9, r5, r1
 8012176:	6965      	ldr	r5, [r4, #20]
 8012178:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801217c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012180:	3301      	adds	r3, #1
 8012182:	444b      	add	r3, r9
 8012184:	106d      	asrs	r5, r5, #1
 8012186:	429d      	cmp	r5, r3
 8012188:	bf38      	it	cc
 801218a:	461d      	movcc	r5, r3
 801218c:	0553      	lsls	r3, r2, #21
 801218e:	d531      	bpl.n	80121f4 <__ssputs_r+0xa0>
 8012190:	4629      	mov	r1, r5
 8012192:	f000 fb61 	bl	8012858 <_malloc_r>
 8012196:	4606      	mov	r6, r0
 8012198:	b950      	cbnz	r0, 80121b0 <__ssputs_r+0x5c>
 801219a:	230c      	movs	r3, #12
 801219c:	f8ca 3000 	str.w	r3, [sl]
 80121a0:	89a3      	ldrh	r3, [r4, #12]
 80121a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121a6:	81a3      	strh	r3, [r4, #12]
 80121a8:	f04f 30ff 	mov.w	r0, #4294967295
 80121ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121b0:	6921      	ldr	r1, [r4, #16]
 80121b2:	464a      	mov	r2, r9
 80121b4:	f000 fabe 	bl	8012734 <memcpy>
 80121b8:	89a3      	ldrh	r3, [r4, #12]
 80121ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80121be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121c2:	81a3      	strh	r3, [r4, #12]
 80121c4:	6126      	str	r6, [r4, #16]
 80121c6:	6165      	str	r5, [r4, #20]
 80121c8:	444e      	add	r6, r9
 80121ca:	eba5 0509 	sub.w	r5, r5, r9
 80121ce:	6026      	str	r6, [r4, #0]
 80121d0:	60a5      	str	r5, [r4, #8]
 80121d2:	463e      	mov	r6, r7
 80121d4:	42be      	cmp	r6, r7
 80121d6:	d900      	bls.n	80121da <__ssputs_r+0x86>
 80121d8:	463e      	mov	r6, r7
 80121da:	6820      	ldr	r0, [r4, #0]
 80121dc:	4632      	mov	r2, r6
 80121de:	4641      	mov	r1, r8
 80121e0:	f000 fab6 	bl	8012750 <memmove>
 80121e4:	68a3      	ldr	r3, [r4, #8]
 80121e6:	1b9b      	subs	r3, r3, r6
 80121e8:	60a3      	str	r3, [r4, #8]
 80121ea:	6823      	ldr	r3, [r4, #0]
 80121ec:	4433      	add	r3, r6
 80121ee:	6023      	str	r3, [r4, #0]
 80121f0:	2000      	movs	r0, #0
 80121f2:	e7db      	b.n	80121ac <__ssputs_r+0x58>
 80121f4:	462a      	mov	r2, r5
 80121f6:	f000 fba3 	bl	8012940 <_realloc_r>
 80121fa:	4606      	mov	r6, r0
 80121fc:	2800      	cmp	r0, #0
 80121fe:	d1e1      	bne.n	80121c4 <__ssputs_r+0x70>
 8012200:	6921      	ldr	r1, [r4, #16]
 8012202:	4650      	mov	r0, sl
 8012204:	f000 fabe 	bl	8012784 <_free_r>
 8012208:	e7c7      	b.n	801219a <__ssputs_r+0x46>
	...

0801220c <_svfiprintf_r>:
 801220c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012210:	4698      	mov	r8, r3
 8012212:	898b      	ldrh	r3, [r1, #12]
 8012214:	061b      	lsls	r3, r3, #24
 8012216:	b09d      	sub	sp, #116	; 0x74
 8012218:	4607      	mov	r7, r0
 801221a:	460d      	mov	r5, r1
 801221c:	4614      	mov	r4, r2
 801221e:	d50e      	bpl.n	801223e <_svfiprintf_r+0x32>
 8012220:	690b      	ldr	r3, [r1, #16]
 8012222:	b963      	cbnz	r3, 801223e <_svfiprintf_r+0x32>
 8012224:	2140      	movs	r1, #64	; 0x40
 8012226:	f000 fb17 	bl	8012858 <_malloc_r>
 801222a:	6028      	str	r0, [r5, #0]
 801222c:	6128      	str	r0, [r5, #16]
 801222e:	b920      	cbnz	r0, 801223a <_svfiprintf_r+0x2e>
 8012230:	230c      	movs	r3, #12
 8012232:	603b      	str	r3, [r7, #0]
 8012234:	f04f 30ff 	mov.w	r0, #4294967295
 8012238:	e0d1      	b.n	80123de <_svfiprintf_r+0x1d2>
 801223a:	2340      	movs	r3, #64	; 0x40
 801223c:	616b      	str	r3, [r5, #20]
 801223e:	2300      	movs	r3, #0
 8012240:	9309      	str	r3, [sp, #36]	; 0x24
 8012242:	2320      	movs	r3, #32
 8012244:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012248:	f8cd 800c 	str.w	r8, [sp, #12]
 801224c:	2330      	movs	r3, #48	; 0x30
 801224e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80123f8 <_svfiprintf_r+0x1ec>
 8012252:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012256:	f04f 0901 	mov.w	r9, #1
 801225a:	4623      	mov	r3, r4
 801225c:	469a      	mov	sl, r3
 801225e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012262:	b10a      	cbz	r2, 8012268 <_svfiprintf_r+0x5c>
 8012264:	2a25      	cmp	r2, #37	; 0x25
 8012266:	d1f9      	bne.n	801225c <_svfiprintf_r+0x50>
 8012268:	ebba 0b04 	subs.w	fp, sl, r4
 801226c:	d00b      	beq.n	8012286 <_svfiprintf_r+0x7a>
 801226e:	465b      	mov	r3, fp
 8012270:	4622      	mov	r2, r4
 8012272:	4629      	mov	r1, r5
 8012274:	4638      	mov	r0, r7
 8012276:	f7ff ff6d 	bl	8012154 <__ssputs_r>
 801227a:	3001      	adds	r0, #1
 801227c:	f000 80aa 	beq.w	80123d4 <_svfiprintf_r+0x1c8>
 8012280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012282:	445a      	add	r2, fp
 8012284:	9209      	str	r2, [sp, #36]	; 0x24
 8012286:	f89a 3000 	ldrb.w	r3, [sl]
 801228a:	2b00      	cmp	r3, #0
 801228c:	f000 80a2 	beq.w	80123d4 <_svfiprintf_r+0x1c8>
 8012290:	2300      	movs	r3, #0
 8012292:	f04f 32ff 	mov.w	r2, #4294967295
 8012296:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801229a:	f10a 0a01 	add.w	sl, sl, #1
 801229e:	9304      	str	r3, [sp, #16]
 80122a0:	9307      	str	r3, [sp, #28]
 80122a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122a6:	931a      	str	r3, [sp, #104]	; 0x68
 80122a8:	4654      	mov	r4, sl
 80122aa:	2205      	movs	r2, #5
 80122ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122b0:	4851      	ldr	r0, [pc, #324]	; (80123f8 <_svfiprintf_r+0x1ec>)
 80122b2:	f7fd ff95 	bl	80101e0 <memchr>
 80122b6:	9a04      	ldr	r2, [sp, #16]
 80122b8:	b9d8      	cbnz	r0, 80122f2 <_svfiprintf_r+0xe6>
 80122ba:	06d0      	lsls	r0, r2, #27
 80122bc:	bf44      	itt	mi
 80122be:	2320      	movmi	r3, #32
 80122c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122c4:	0711      	lsls	r1, r2, #28
 80122c6:	bf44      	itt	mi
 80122c8:	232b      	movmi	r3, #43	; 0x2b
 80122ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122ce:	f89a 3000 	ldrb.w	r3, [sl]
 80122d2:	2b2a      	cmp	r3, #42	; 0x2a
 80122d4:	d015      	beq.n	8012302 <_svfiprintf_r+0xf6>
 80122d6:	9a07      	ldr	r2, [sp, #28]
 80122d8:	4654      	mov	r4, sl
 80122da:	2000      	movs	r0, #0
 80122dc:	f04f 0c0a 	mov.w	ip, #10
 80122e0:	4621      	mov	r1, r4
 80122e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122e6:	3b30      	subs	r3, #48	; 0x30
 80122e8:	2b09      	cmp	r3, #9
 80122ea:	d94e      	bls.n	801238a <_svfiprintf_r+0x17e>
 80122ec:	b1b0      	cbz	r0, 801231c <_svfiprintf_r+0x110>
 80122ee:	9207      	str	r2, [sp, #28]
 80122f0:	e014      	b.n	801231c <_svfiprintf_r+0x110>
 80122f2:	eba0 0308 	sub.w	r3, r0, r8
 80122f6:	fa09 f303 	lsl.w	r3, r9, r3
 80122fa:	4313      	orrs	r3, r2
 80122fc:	9304      	str	r3, [sp, #16]
 80122fe:	46a2      	mov	sl, r4
 8012300:	e7d2      	b.n	80122a8 <_svfiprintf_r+0x9c>
 8012302:	9b03      	ldr	r3, [sp, #12]
 8012304:	1d19      	adds	r1, r3, #4
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	9103      	str	r1, [sp, #12]
 801230a:	2b00      	cmp	r3, #0
 801230c:	bfbb      	ittet	lt
 801230e:	425b      	neglt	r3, r3
 8012310:	f042 0202 	orrlt.w	r2, r2, #2
 8012314:	9307      	strge	r3, [sp, #28]
 8012316:	9307      	strlt	r3, [sp, #28]
 8012318:	bfb8      	it	lt
 801231a:	9204      	strlt	r2, [sp, #16]
 801231c:	7823      	ldrb	r3, [r4, #0]
 801231e:	2b2e      	cmp	r3, #46	; 0x2e
 8012320:	d10c      	bne.n	801233c <_svfiprintf_r+0x130>
 8012322:	7863      	ldrb	r3, [r4, #1]
 8012324:	2b2a      	cmp	r3, #42	; 0x2a
 8012326:	d135      	bne.n	8012394 <_svfiprintf_r+0x188>
 8012328:	9b03      	ldr	r3, [sp, #12]
 801232a:	1d1a      	adds	r2, r3, #4
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	9203      	str	r2, [sp, #12]
 8012330:	2b00      	cmp	r3, #0
 8012332:	bfb8      	it	lt
 8012334:	f04f 33ff 	movlt.w	r3, #4294967295
 8012338:	3402      	adds	r4, #2
 801233a:	9305      	str	r3, [sp, #20]
 801233c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80123fc <_svfiprintf_r+0x1f0>
 8012340:	7821      	ldrb	r1, [r4, #0]
 8012342:	2203      	movs	r2, #3
 8012344:	4650      	mov	r0, sl
 8012346:	f7fd ff4b 	bl	80101e0 <memchr>
 801234a:	b140      	cbz	r0, 801235e <_svfiprintf_r+0x152>
 801234c:	2340      	movs	r3, #64	; 0x40
 801234e:	eba0 000a 	sub.w	r0, r0, sl
 8012352:	fa03 f000 	lsl.w	r0, r3, r0
 8012356:	9b04      	ldr	r3, [sp, #16]
 8012358:	4303      	orrs	r3, r0
 801235a:	3401      	adds	r4, #1
 801235c:	9304      	str	r3, [sp, #16]
 801235e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012362:	4827      	ldr	r0, [pc, #156]	; (8012400 <_svfiprintf_r+0x1f4>)
 8012364:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012368:	2206      	movs	r2, #6
 801236a:	f7fd ff39 	bl	80101e0 <memchr>
 801236e:	2800      	cmp	r0, #0
 8012370:	d038      	beq.n	80123e4 <_svfiprintf_r+0x1d8>
 8012372:	4b24      	ldr	r3, [pc, #144]	; (8012404 <_svfiprintf_r+0x1f8>)
 8012374:	bb1b      	cbnz	r3, 80123be <_svfiprintf_r+0x1b2>
 8012376:	9b03      	ldr	r3, [sp, #12]
 8012378:	3307      	adds	r3, #7
 801237a:	f023 0307 	bic.w	r3, r3, #7
 801237e:	3308      	adds	r3, #8
 8012380:	9303      	str	r3, [sp, #12]
 8012382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012384:	4433      	add	r3, r6
 8012386:	9309      	str	r3, [sp, #36]	; 0x24
 8012388:	e767      	b.n	801225a <_svfiprintf_r+0x4e>
 801238a:	fb0c 3202 	mla	r2, ip, r2, r3
 801238e:	460c      	mov	r4, r1
 8012390:	2001      	movs	r0, #1
 8012392:	e7a5      	b.n	80122e0 <_svfiprintf_r+0xd4>
 8012394:	2300      	movs	r3, #0
 8012396:	3401      	adds	r4, #1
 8012398:	9305      	str	r3, [sp, #20]
 801239a:	4619      	mov	r1, r3
 801239c:	f04f 0c0a 	mov.w	ip, #10
 80123a0:	4620      	mov	r0, r4
 80123a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123a6:	3a30      	subs	r2, #48	; 0x30
 80123a8:	2a09      	cmp	r2, #9
 80123aa:	d903      	bls.n	80123b4 <_svfiprintf_r+0x1a8>
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d0c5      	beq.n	801233c <_svfiprintf_r+0x130>
 80123b0:	9105      	str	r1, [sp, #20]
 80123b2:	e7c3      	b.n	801233c <_svfiprintf_r+0x130>
 80123b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80123b8:	4604      	mov	r4, r0
 80123ba:	2301      	movs	r3, #1
 80123bc:	e7f0      	b.n	80123a0 <_svfiprintf_r+0x194>
 80123be:	ab03      	add	r3, sp, #12
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	462a      	mov	r2, r5
 80123c4:	4b10      	ldr	r3, [pc, #64]	; (8012408 <_svfiprintf_r+0x1fc>)
 80123c6:	a904      	add	r1, sp, #16
 80123c8:	4638      	mov	r0, r7
 80123ca:	f3af 8000 	nop.w
 80123ce:	1c42      	adds	r2, r0, #1
 80123d0:	4606      	mov	r6, r0
 80123d2:	d1d6      	bne.n	8012382 <_svfiprintf_r+0x176>
 80123d4:	89ab      	ldrh	r3, [r5, #12]
 80123d6:	065b      	lsls	r3, r3, #25
 80123d8:	f53f af2c 	bmi.w	8012234 <_svfiprintf_r+0x28>
 80123dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123de:	b01d      	add	sp, #116	; 0x74
 80123e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e4:	ab03      	add	r3, sp, #12
 80123e6:	9300      	str	r3, [sp, #0]
 80123e8:	462a      	mov	r2, r5
 80123ea:	4b07      	ldr	r3, [pc, #28]	; (8012408 <_svfiprintf_r+0x1fc>)
 80123ec:	a904      	add	r1, sp, #16
 80123ee:	4638      	mov	r0, r7
 80123f0:	f000 f87a 	bl	80124e8 <_printf_i>
 80123f4:	e7eb      	b.n	80123ce <_svfiprintf_r+0x1c2>
 80123f6:	bf00      	nop
 80123f8:	08012a3c 	.word	0x08012a3c
 80123fc:	08012a42 	.word	0x08012a42
 8012400:	08012a46 	.word	0x08012a46
 8012404:	00000000 	.word	0x00000000
 8012408:	08012155 	.word	0x08012155

0801240c <_printf_common>:
 801240c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012410:	4616      	mov	r6, r2
 8012412:	4699      	mov	r9, r3
 8012414:	688a      	ldr	r2, [r1, #8]
 8012416:	690b      	ldr	r3, [r1, #16]
 8012418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801241c:	4293      	cmp	r3, r2
 801241e:	bfb8      	it	lt
 8012420:	4613      	movlt	r3, r2
 8012422:	6033      	str	r3, [r6, #0]
 8012424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012428:	4607      	mov	r7, r0
 801242a:	460c      	mov	r4, r1
 801242c:	b10a      	cbz	r2, 8012432 <_printf_common+0x26>
 801242e:	3301      	adds	r3, #1
 8012430:	6033      	str	r3, [r6, #0]
 8012432:	6823      	ldr	r3, [r4, #0]
 8012434:	0699      	lsls	r1, r3, #26
 8012436:	bf42      	ittt	mi
 8012438:	6833      	ldrmi	r3, [r6, #0]
 801243a:	3302      	addmi	r3, #2
 801243c:	6033      	strmi	r3, [r6, #0]
 801243e:	6825      	ldr	r5, [r4, #0]
 8012440:	f015 0506 	ands.w	r5, r5, #6
 8012444:	d106      	bne.n	8012454 <_printf_common+0x48>
 8012446:	f104 0a19 	add.w	sl, r4, #25
 801244a:	68e3      	ldr	r3, [r4, #12]
 801244c:	6832      	ldr	r2, [r6, #0]
 801244e:	1a9b      	subs	r3, r3, r2
 8012450:	42ab      	cmp	r3, r5
 8012452:	dc26      	bgt.n	80124a2 <_printf_common+0x96>
 8012454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012458:	1e13      	subs	r3, r2, #0
 801245a:	6822      	ldr	r2, [r4, #0]
 801245c:	bf18      	it	ne
 801245e:	2301      	movne	r3, #1
 8012460:	0692      	lsls	r2, r2, #26
 8012462:	d42b      	bmi.n	80124bc <_printf_common+0xb0>
 8012464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012468:	4649      	mov	r1, r9
 801246a:	4638      	mov	r0, r7
 801246c:	47c0      	blx	r8
 801246e:	3001      	adds	r0, #1
 8012470:	d01e      	beq.n	80124b0 <_printf_common+0xa4>
 8012472:	6823      	ldr	r3, [r4, #0]
 8012474:	68e5      	ldr	r5, [r4, #12]
 8012476:	6832      	ldr	r2, [r6, #0]
 8012478:	f003 0306 	and.w	r3, r3, #6
 801247c:	2b04      	cmp	r3, #4
 801247e:	bf08      	it	eq
 8012480:	1aad      	subeq	r5, r5, r2
 8012482:	68a3      	ldr	r3, [r4, #8]
 8012484:	6922      	ldr	r2, [r4, #16]
 8012486:	bf0c      	ite	eq
 8012488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801248c:	2500      	movne	r5, #0
 801248e:	4293      	cmp	r3, r2
 8012490:	bfc4      	itt	gt
 8012492:	1a9b      	subgt	r3, r3, r2
 8012494:	18ed      	addgt	r5, r5, r3
 8012496:	2600      	movs	r6, #0
 8012498:	341a      	adds	r4, #26
 801249a:	42b5      	cmp	r5, r6
 801249c:	d11a      	bne.n	80124d4 <_printf_common+0xc8>
 801249e:	2000      	movs	r0, #0
 80124a0:	e008      	b.n	80124b4 <_printf_common+0xa8>
 80124a2:	2301      	movs	r3, #1
 80124a4:	4652      	mov	r2, sl
 80124a6:	4649      	mov	r1, r9
 80124a8:	4638      	mov	r0, r7
 80124aa:	47c0      	blx	r8
 80124ac:	3001      	adds	r0, #1
 80124ae:	d103      	bne.n	80124b8 <_printf_common+0xac>
 80124b0:	f04f 30ff 	mov.w	r0, #4294967295
 80124b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124b8:	3501      	adds	r5, #1
 80124ba:	e7c6      	b.n	801244a <_printf_common+0x3e>
 80124bc:	18e1      	adds	r1, r4, r3
 80124be:	1c5a      	adds	r2, r3, #1
 80124c0:	2030      	movs	r0, #48	; 0x30
 80124c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80124c6:	4422      	add	r2, r4
 80124c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80124cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80124d0:	3302      	adds	r3, #2
 80124d2:	e7c7      	b.n	8012464 <_printf_common+0x58>
 80124d4:	2301      	movs	r3, #1
 80124d6:	4622      	mov	r2, r4
 80124d8:	4649      	mov	r1, r9
 80124da:	4638      	mov	r0, r7
 80124dc:	47c0      	blx	r8
 80124de:	3001      	adds	r0, #1
 80124e0:	d0e6      	beq.n	80124b0 <_printf_common+0xa4>
 80124e2:	3601      	adds	r6, #1
 80124e4:	e7d9      	b.n	801249a <_printf_common+0x8e>
	...

080124e8 <_printf_i>:
 80124e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80124ec:	7e0f      	ldrb	r7, [r1, #24]
 80124ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80124f0:	2f78      	cmp	r7, #120	; 0x78
 80124f2:	4691      	mov	r9, r2
 80124f4:	4680      	mov	r8, r0
 80124f6:	460c      	mov	r4, r1
 80124f8:	469a      	mov	sl, r3
 80124fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80124fe:	d807      	bhi.n	8012510 <_printf_i+0x28>
 8012500:	2f62      	cmp	r7, #98	; 0x62
 8012502:	d80a      	bhi.n	801251a <_printf_i+0x32>
 8012504:	2f00      	cmp	r7, #0
 8012506:	f000 80d8 	beq.w	80126ba <_printf_i+0x1d2>
 801250a:	2f58      	cmp	r7, #88	; 0x58
 801250c:	f000 80a3 	beq.w	8012656 <_printf_i+0x16e>
 8012510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012518:	e03a      	b.n	8012590 <_printf_i+0xa8>
 801251a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801251e:	2b15      	cmp	r3, #21
 8012520:	d8f6      	bhi.n	8012510 <_printf_i+0x28>
 8012522:	a101      	add	r1, pc, #4	; (adr r1, 8012528 <_printf_i+0x40>)
 8012524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012528:	08012581 	.word	0x08012581
 801252c:	08012595 	.word	0x08012595
 8012530:	08012511 	.word	0x08012511
 8012534:	08012511 	.word	0x08012511
 8012538:	08012511 	.word	0x08012511
 801253c:	08012511 	.word	0x08012511
 8012540:	08012595 	.word	0x08012595
 8012544:	08012511 	.word	0x08012511
 8012548:	08012511 	.word	0x08012511
 801254c:	08012511 	.word	0x08012511
 8012550:	08012511 	.word	0x08012511
 8012554:	080126a1 	.word	0x080126a1
 8012558:	080125c5 	.word	0x080125c5
 801255c:	08012683 	.word	0x08012683
 8012560:	08012511 	.word	0x08012511
 8012564:	08012511 	.word	0x08012511
 8012568:	080126c3 	.word	0x080126c3
 801256c:	08012511 	.word	0x08012511
 8012570:	080125c5 	.word	0x080125c5
 8012574:	08012511 	.word	0x08012511
 8012578:	08012511 	.word	0x08012511
 801257c:	0801268b 	.word	0x0801268b
 8012580:	682b      	ldr	r3, [r5, #0]
 8012582:	1d1a      	adds	r2, r3, #4
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	602a      	str	r2, [r5, #0]
 8012588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801258c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012590:	2301      	movs	r3, #1
 8012592:	e0a3      	b.n	80126dc <_printf_i+0x1f4>
 8012594:	6820      	ldr	r0, [r4, #0]
 8012596:	6829      	ldr	r1, [r5, #0]
 8012598:	0606      	lsls	r6, r0, #24
 801259a:	f101 0304 	add.w	r3, r1, #4
 801259e:	d50a      	bpl.n	80125b6 <_printf_i+0xce>
 80125a0:	680e      	ldr	r6, [r1, #0]
 80125a2:	602b      	str	r3, [r5, #0]
 80125a4:	2e00      	cmp	r6, #0
 80125a6:	da03      	bge.n	80125b0 <_printf_i+0xc8>
 80125a8:	232d      	movs	r3, #45	; 0x2d
 80125aa:	4276      	negs	r6, r6
 80125ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125b0:	485e      	ldr	r0, [pc, #376]	; (801272c <_printf_i+0x244>)
 80125b2:	230a      	movs	r3, #10
 80125b4:	e019      	b.n	80125ea <_printf_i+0x102>
 80125b6:	680e      	ldr	r6, [r1, #0]
 80125b8:	602b      	str	r3, [r5, #0]
 80125ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80125be:	bf18      	it	ne
 80125c0:	b236      	sxthne	r6, r6
 80125c2:	e7ef      	b.n	80125a4 <_printf_i+0xbc>
 80125c4:	682b      	ldr	r3, [r5, #0]
 80125c6:	6820      	ldr	r0, [r4, #0]
 80125c8:	1d19      	adds	r1, r3, #4
 80125ca:	6029      	str	r1, [r5, #0]
 80125cc:	0601      	lsls	r1, r0, #24
 80125ce:	d501      	bpl.n	80125d4 <_printf_i+0xec>
 80125d0:	681e      	ldr	r6, [r3, #0]
 80125d2:	e002      	b.n	80125da <_printf_i+0xf2>
 80125d4:	0646      	lsls	r6, r0, #25
 80125d6:	d5fb      	bpl.n	80125d0 <_printf_i+0xe8>
 80125d8:	881e      	ldrh	r6, [r3, #0]
 80125da:	4854      	ldr	r0, [pc, #336]	; (801272c <_printf_i+0x244>)
 80125dc:	2f6f      	cmp	r7, #111	; 0x6f
 80125de:	bf0c      	ite	eq
 80125e0:	2308      	moveq	r3, #8
 80125e2:	230a      	movne	r3, #10
 80125e4:	2100      	movs	r1, #0
 80125e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80125ea:	6865      	ldr	r5, [r4, #4]
 80125ec:	60a5      	str	r5, [r4, #8]
 80125ee:	2d00      	cmp	r5, #0
 80125f0:	bfa2      	ittt	ge
 80125f2:	6821      	ldrge	r1, [r4, #0]
 80125f4:	f021 0104 	bicge.w	r1, r1, #4
 80125f8:	6021      	strge	r1, [r4, #0]
 80125fa:	b90e      	cbnz	r6, 8012600 <_printf_i+0x118>
 80125fc:	2d00      	cmp	r5, #0
 80125fe:	d04d      	beq.n	801269c <_printf_i+0x1b4>
 8012600:	4615      	mov	r5, r2
 8012602:	fbb6 f1f3 	udiv	r1, r6, r3
 8012606:	fb03 6711 	mls	r7, r3, r1, r6
 801260a:	5dc7      	ldrb	r7, [r0, r7]
 801260c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012610:	4637      	mov	r7, r6
 8012612:	42bb      	cmp	r3, r7
 8012614:	460e      	mov	r6, r1
 8012616:	d9f4      	bls.n	8012602 <_printf_i+0x11a>
 8012618:	2b08      	cmp	r3, #8
 801261a:	d10b      	bne.n	8012634 <_printf_i+0x14c>
 801261c:	6823      	ldr	r3, [r4, #0]
 801261e:	07de      	lsls	r6, r3, #31
 8012620:	d508      	bpl.n	8012634 <_printf_i+0x14c>
 8012622:	6923      	ldr	r3, [r4, #16]
 8012624:	6861      	ldr	r1, [r4, #4]
 8012626:	4299      	cmp	r1, r3
 8012628:	bfde      	ittt	le
 801262a:	2330      	movle	r3, #48	; 0x30
 801262c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012630:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012634:	1b52      	subs	r2, r2, r5
 8012636:	6122      	str	r2, [r4, #16]
 8012638:	f8cd a000 	str.w	sl, [sp]
 801263c:	464b      	mov	r3, r9
 801263e:	aa03      	add	r2, sp, #12
 8012640:	4621      	mov	r1, r4
 8012642:	4640      	mov	r0, r8
 8012644:	f7ff fee2 	bl	801240c <_printf_common>
 8012648:	3001      	adds	r0, #1
 801264a:	d14c      	bne.n	80126e6 <_printf_i+0x1fe>
 801264c:	f04f 30ff 	mov.w	r0, #4294967295
 8012650:	b004      	add	sp, #16
 8012652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012656:	4835      	ldr	r0, [pc, #212]	; (801272c <_printf_i+0x244>)
 8012658:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801265c:	6829      	ldr	r1, [r5, #0]
 801265e:	6823      	ldr	r3, [r4, #0]
 8012660:	f851 6b04 	ldr.w	r6, [r1], #4
 8012664:	6029      	str	r1, [r5, #0]
 8012666:	061d      	lsls	r5, r3, #24
 8012668:	d514      	bpl.n	8012694 <_printf_i+0x1ac>
 801266a:	07df      	lsls	r7, r3, #31
 801266c:	bf44      	itt	mi
 801266e:	f043 0320 	orrmi.w	r3, r3, #32
 8012672:	6023      	strmi	r3, [r4, #0]
 8012674:	b91e      	cbnz	r6, 801267e <_printf_i+0x196>
 8012676:	6823      	ldr	r3, [r4, #0]
 8012678:	f023 0320 	bic.w	r3, r3, #32
 801267c:	6023      	str	r3, [r4, #0]
 801267e:	2310      	movs	r3, #16
 8012680:	e7b0      	b.n	80125e4 <_printf_i+0xfc>
 8012682:	6823      	ldr	r3, [r4, #0]
 8012684:	f043 0320 	orr.w	r3, r3, #32
 8012688:	6023      	str	r3, [r4, #0]
 801268a:	2378      	movs	r3, #120	; 0x78
 801268c:	4828      	ldr	r0, [pc, #160]	; (8012730 <_printf_i+0x248>)
 801268e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012692:	e7e3      	b.n	801265c <_printf_i+0x174>
 8012694:	0659      	lsls	r1, r3, #25
 8012696:	bf48      	it	mi
 8012698:	b2b6      	uxthmi	r6, r6
 801269a:	e7e6      	b.n	801266a <_printf_i+0x182>
 801269c:	4615      	mov	r5, r2
 801269e:	e7bb      	b.n	8012618 <_printf_i+0x130>
 80126a0:	682b      	ldr	r3, [r5, #0]
 80126a2:	6826      	ldr	r6, [r4, #0]
 80126a4:	6961      	ldr	r1, [r4, #20]
 80126a6:	1d18      	adds	r0, r3, #4
 80126a8:	6028      	str	r0, [r5, #0]
 80126aa:	0635      	lsls	r5, r6, #24
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	d501      	bpl.n	80126b4 <_printf_i+0x1cc>
 80126b0:	6019      	str	r1, [r3, #0]
 80126b2:	e002      	b.n	80126ba <_printf_i+0x1d2>
 80126b4:	0670      	lsls	r0, r6, #25
 80126b6:	d5fb      	bpl.n	80126b0 <_printf_i+0x1c8>
 80126b8:	8019      	strh	r1, [r3, #0]
 80126ba:	2300      	movs	r3, #0
 80126bc:	6123      	str	r3, [r4, #16]
 80126be:	4615      	mov	r5, r2
 80126c0:	e7ba      	b.n	8012638 <_printf_i+0x150>
 80126c2:	682b      	ldr	r3, [r5, #0]
 80126c4:	1d1a      	adds	r2, r3, #4
 80126c6:	602a      	str	r2, [r5, #0]
 80126c8:	681d      	ldr	r5, [r3, #0]
 80126ca:	6862      	ldr	r2, [r4, #4]
 80126cc:	2100      	movs	r1, #0
 80126ce:	4628      	mov	r0, r5
 80126d0:	f7fd fd86 	bl	80101e0 <memchr>
 80126d4:	b108      	cbz	r0, 80126da <_printf_i+0x1f2>
 80126d6:	1b40      	subs	r0, r0, r5
 80126d8:	6060      	str	r0, [r4, #4]
 80126da:	6863      	ldr	r3, [r4, #4]
 80126dc:	6123      	str	r3, [r4, #16]
 80126de:	2300      	movs	r3, #0
 80126e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126e4:	e7a8      	b.n	8012638 <_printf_i+0x150>
 80126e6:	6923      	ldr	r3, [r4, #16]
 80126e8:	462a      	mov	r2, r5
 80126ea:	4649      	mov	r1, r9
 80126ec:	4640      	mov	r0, r8
 80126ee:	47d0      	blx	sl
 80126f0:	3001      	adds	r0, #1
 80126f2:	d0ab      	beq.n	801264c <_printf_i+0x164>
 80126f4:	6823      	ldr	r3, [r4, #0]
 80126f6:	079b      	lsls	r3, r3, #30
 80126f8:	d413      	bmi.n	8012722 <_printf_i+0x23a>
 80126fa:	68e0      	ldr	r0, [r4, #12]
 80126fc:	9b03      	ldr	r3, [sp, #12]
 80126fe:	4298      	cmp	r0, r3
 8012700:	bfb8      	it	lt
 8012702:	4618      	movlt	r0, r3
 8012704:	e7a4      	b.n	8012650 <_printf_i+0x168>
 8012706:	2301      	movs	r3, #1
 8012708:	4632      	mov	r2, r6
 801270a:	4649      	mov	r1, r9
 801270c:	4640      	mov	r0, r8
 801270e:	47d0      	blx	sl
 8012710:	3001      	adds	r0, #1
 8012712:	d09b      	beq.n	801264c <_printf_i+0x164>
 8012714:	3501      	adds	r5, #1
 8012716:	68e3      	ldr	r3, [r4, #12]
 8012718:	9903      	ldr	r1, [sp, #12]
 801271a:	1a5b      	subs	r3, r3, r1
 801271c:	42ab      	cmp	r3, r5
 801271e:	dcf2      	bgt.n	8012706 <_printf_i+0x21e>
 8012720:	e7eb      	b.n	80126fa <_printf_i+0x212>
 8012722:	2500      	movs	r5, #0
 8012724:	f104 0619 	add.w	r6, r4, #25
 8012728:	e7f5      	b.n	8012716 <_printf_i+0x22e>
 801272a:	bf00      	nop
 801272c:	08012a4d 	.word	0x08012a4d
 8012730:	08012a5e 	.word	0x08012a5e

08012734 <memcpy>:
 8012734:	440a      	add	r2, r1
 8012736:	4291      	cmp	r1, r2
 8012738:	f100 33ff 	add.w	r3, r0, #4294967295
 801273c:	d100      	bne.n	8012740 <memcpy+0xc>
 801273e:	4770      	bx	lr
 8012740:	b510      	push	{r4, lr}
 8012742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012746:	f803 4f01 	strb.w	r4, [r3, #1]!
 801274a:	4291      	cmp	r1, r2
 801274c:	d1f9      	bne.n	8012742 <memcpy+0xe>
 801274e:	bd10      	pop	{r4, pc}

08012750 <memmove>:
 8012750:	4288      	cmp	r0, r1
 8012752:	b510      	push	{r4, lr}
 8012754:	eb01 0402 	add.w	r4, r1, r2
 8012758:	d902      	bls.n	8012760 <memmove+0x10>
 801275a:	4284      	cmp	r4, r0
 801275c:	4623      	mov	r3, r4
 801275e:	d807      	bhi.n	8012770 <memmove+0x20>
 8012760:	1e43      	subs	r3, r0, #1
 8012762:	42a1      	cmp	r1, r4
 8012764:	d008      	beq.n	8012778 <memmove+0x28>
 8012766:	f811 2b01 	ldrb.w	r2, [r1], #1
 801276a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801276e:	e7f8      	b.n	8012762 <memmove+0x12>
 8012770:	4402      	add	r2, r0
 8012772:	4601      	mov	r1, r0
 8012774:	428a      	cmp	r2, r1
 8012776:	d100      	bne.n	801277a <memmove+0x2a>
 8012778:	bd10      	pop	{r4, pc}
 801277a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801277e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012782:	e7f7      	b.n	8012774 <memmove+0x24>

08012784 <_free_r>:
 8012784:	b538      	push	{r3, r4, r5, lr}
 8012786:	4605      	mov	r5, r0
 8012788:	2900      	cmp	r1, #0
 801278a:	d041      	beq.n	8012810 <_free_r+0x8c>
 801278c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012790:	1f0c      	subs	r4, r1, #4
 8012792:	2b00      	cmp	r3, #0
 8012794:	bfb8      	it	lt
 8012796:	18e4      	addlt	r4, r4, r3
 8012798:	f000 f912 	bl	80129c0 <__malloc_lock>
 801279c:	4a1d      	ldr	r2, [pc, #116]	; (8012814 <_free_r+0x90>)
 801279e:	6813      	ldr	r3, [r2, #0]
 80127a0:	b933      	cbnz	r3, 80127b0 <_free_r+0x2c>
 80127a2:	6063      	str	r3, [r4, #4]
 80127a4:	6014      	str	r4, [r2, #0]
 80127a6:	4628      	mov	r0, r5
 80127a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127ac:	f000 b90e 	b.w	80129cc <__malloc_unlock>
 80127b0:	42a3      	cmp	r3, r4
 80127b2:	d908      	bls.n	80127c6 <_free_r+0x42>
 80127b4:	6820      	ldr	r0, [r4, #0]
 80127b6:	1821      	adds	r1, r4, r0
 80127b8:	428b      	cmp	r3, r1
 80127ba:	bf01      	itttt	eq
 80127bc:	6819      	ldreq	r1, [r3, #0]
 80127be:	685b      	ldreq	r3, [r3, #4]
 80127c0:	1809      	addeq	r1, r1, r0
 80127c2:	6021      	streq	r1, [r4, #0]
 80127c4:	e7ed      	b.n	80127a2 <_free_r+0x1e>
 80127c6:	461a      	mov	r2, r3
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	b10b      	cbz	r3, 80127d0 <_free_r+0x4c>
 80127cc:	42a3      	cmp	r3, r4
 80127ce:	d9fa      	bls.n	80127c6 <_free_r+0x42>
 80127d0:	6811      	ldr	r1, [r2, #0]
 80127d2:	1850      	adds	r0, r2, r1
 80127d4:	42a0      	cmp	r0, r4
 80127d6:	d10b      	bne.n	80127f0 <_free_r+0x6c>
 80127d8:	6820      	ldr	r0, [r4, #0]
 80127da:	4401      	add	r1, r0
 80127dc:	1850      	adds	r0, r2, r1
 80127de:	4283      	cmp	r3, r0
 80127e0:	6011      	str	r1, [r2, #0]
 80127e2:	d1e0      	bne.n	80127a6 <_free_r+0x22>
 80127e4:	6818      	ldr	r0, [r3, #0]
 80127e6:	685b      	ldr	r3, [r3, #4]
 80127e8:	6053      	str	r3, [r2, #4]
 80127ea:	4401      	add	r1, r0
 80127ec:	6011      	str	r1, [r2, #0]
 80127ee:	e7da      	b.n	80127a6 <_free_r+0x22>
 80127f0:	d902      	bls.n	80127f8 <_free_r+0x74>
 80127f2:	230c      	movs	r3, #12
 80127f4:	602b      	str	r3, [r5, #0]
 80127f6:	e7d6      	b.n	80127a6 <_free_r+0x22>
 80127f8:	6820      	ldr	r0, [r4, #0]
 80127fa:	1821      	adds	r1, r4, r0
 80127fc:	428b      	cmp	r3, r1
 80127fe:	bf04      	itt	eq
 8012800:	6819      	ldreq	r1, [r3, #0]
 8012802:	685b      	ldreq	r3, [r3, #4]
 8012804:	6063      	str	r3, [r4, #4]
 8012806:	bf04      	itt	eq
 8012808:	1809      	addeq	r1, r1, r0
 801280a:	6021      	streq	r1, [r4, #0]
 801280c:	6054      	str	r4, [r2, #4]
 801280e:	e7ca      	b.n	80127a6 <_free_r+0x22>
 8012810:	bd38      	pop	{r3, r4, r5, pc}
 8012812:	bf00      	nop
 8012814:	200000d8 	.word	0x200000d8

08012818 <sbrk_aligned>:
 8012818:	b570      	push	{r4, r5, r6, lr}
 801281a:	4e0e      	ldr	r6, [pc, #56]	; (8012854 <sbrk_aligned+0x3c>)
 801281c:	460c      	mov	r4, r1
 801281e:	6831      	ldr	r1, [r6, #0]
 8012820:	4605      	mov	r5, r0
 8012822:	b911      	cbnz	r1, 801282a <sbrk_aligned+0x12>
 8012824:	f000 f8bc 	bl	80129a0 <_sbrk_r>
 8012828:	6030      	str	r0, [r6, #0]
 801282a:	4621      	mov	r1, r4
 801282c:	4628      	mov	r0, r5
 801282e:	f000 f8b7 	bl	80129a0 <_sbrk_r>
 8012832:	1c43      	adds	r3, r0, #1
 8012834:	d00a      	beq.n	801284c <sbrk_aligned+0x34>
 8012836:	1cc4      	adds	r4, r0, #3
 8012838:	f024 0403 	bic.w	r4, r4, #3
 801283c:	42a0      	cmp	r0, r4
 801283e:	d007      	beq.n	8012850 <sbrk_aligned+0x38>
 8012840:	1a21      	subs	r1, r4, r0
 8012842:	4628      	mov	r0, r5
 8012844:	f000 f8ac 	bl	80129a0 <_sbrk_r>
 8012848:	3001      	adds	r0, #1
 801284a:	d101      	bne.n	8012850 <sbrk_aligned+0x38>
 801284c:	f04f 34ff 	mov.w	r4, #4294967295
 8012850:	4620      	mov	r0, r4
 8012852:	bd70      	pop	{r4, r5, r6, pc}
 8012854:	200000dc 	.word	0x200000dc

08012858 <_malloc_r>:
 8012858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801285c:	1ccd      	adds	r5, r1, #3
 801285e:	f025 0503 	bic.w	r5, r5, #3
 8012862:	3508      	adds	r5, #8
 8012864:	2d0c      	cmp	r5, #12
 8012866:	bf38      	it	cc
 8012868:	250c      	movcc	r5, #12
 801286a:	2d00      	cmp	r5, #0
 801286c:	4607      	mov	r7, r0
 801286e:	db01      	blt.n	8012874 <_malloc_r+0x1c>
 8012870:	42a9      	cmp	r1, r5
 8012872:	d905      	bls.n	8012880 <_malloc_r+0x28>
 8012874:	230c      	movs	r3, #12
 8012876:	603b      	str	r3, [r7, #0]
 8012878:	2600      	movs	r6, #0
 801287a:	4630      	mov	r0, r6
 801287c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012880:	4e2e      	ldr	r6, [pc, #184]	; (801293c <_malloc_r+0xe4>)
 8012882:	f000 f89d 	bl	80129c0 <__malloc_lock>
 8012886:	6833      	ldr	r3, [r6, #0]
 8012888:	461c      	mov	r4, r3
 801288a:	bb34      	cbnz	r4, 80128da <_malloc_r+0x82>
 801288c:	4629      	mov	r1, r5
 801288e:	4638      	mov	r0, r7
 8012890:	f7ff ffc2 	bl	8012818 <sbrk_aligned>
 8012894:	1c43      	adds	r3, r0, #1
 8012896:	4604      	mov	r4, r0
 8012898:	d14d      	bne.n	8012936 <_malloc_r+0xde>
 801289a:	6834      	ldr	r4, [r6, #0]
 801289c:	4626      	mov	r6, r4
 801289e:	2e00      	cmp	r6, #0
 80128a0:	d140      	bne.n	8012924 <_malloc_r+0xcc>
 80128a2:	6823      	ldr	r3, [r4, #0]
 80128a4:	4631      	mov	r1, r6
 80128a6:	4638      	mov	r0, r7
 80128a8:	eb04 0803 	add.w	r8, r4, r3
 80128ac:	f000 f878 	bl	80129a0 <_sbrk_r>
 80128b0:	4580      	cmp	r8, r0
 80128b2:	d13a      	bne.n	801292a <_malloc_r+0xd2>
 80128b4:	6821      	ldr	r1, [r4, #0]
 80128b6:	3503      	adds	r5, #3
 80128b8:	1a6d      	subs	r5, r5, r1
 80128ba:	f025 0503 	bic.w	r5, r5, #3
 80128be:	3508      	adds	r5, #8
 80128c0:	2d0c      	cmp	r5, #12
 80128c2:	bf38      	it	cc
 80128c4:	250c      	movcc	r5, #12
 80128c6:	4629      	mov	r1, r5
 80128c8:	4638      	mov	r0, r7
 80128ca:	f7ff ffa5 	bl	8012818 <sbrk_aligned>
 80128ce:	3001      	adds	r0, #1
 80128d0:	d02b      	beq.n	801292a <_malloc_r+0xd2>
 80128d2:	6823      	ldr	r3, [r4, #0]
 80128d4:	442b      	add	r3, r5
 80128d6:	6023      	str	r3, [r4, #0]
 80128d8:	e00e      	b.n	80128f8 <_malloc_r+0xa0>
 80128da:	6822      	ldr	r2, [r4, #0]
 80128dc:	1b52      	subs	r2, r2, r5
 80128de:	d41e      	bmi.n	801291e <_malloc_r+0xc6>
 80128e0:	2a0b      	cmp	r2, #11
 80128e2:	d916      	bls.n	8012912 <_malloc_r+0xba>
 80128e4:	1961      	adds	r1, r4, r5
 80128e6:	42a3      	cmp	r3, r4
 80128e8:	6025      	str	r5, [r4, #0]
 80128ea:	bf18      	it	ne
 80128ec:	6059      	strne	r1, [r3, #4]
 80128ee:	6863      	ldr	r3, [r4, #4]
 80128f0:	bf08      	it	eq
 80128f2:	6031      	streq	r1, [r6, #0]
 80128f4:	5162      	str	r2, [r4, r5]
 80128f6:	604b      	str	r3, [r1, #4]
 80128f8:	4638      	mov	r0, r7
 80128fa:	f104 060b 	add.w	r6, r4, #11
 80128fe:	f000 f865 	bl	80129cc <__malloc_unlock>
 8012902:	f026 0607 	bic.w	r6, r6, #7
 8012906:	1d23      	adds	r3, r4, #4
 8012908:	1af2      	subs	r2, r6, r3
 801290a:	d0b6      	beq.n	801287a <_malloc_r+0x22>
 801290c:	1b9b      	subs	r3, r3, r6
 801290e:	50a3      	str	r3, [r4, r2]
 8012910:	e7b3      	b.n	801287a <_malloc_r+0x22>
 8012912:	6862      	ldr	r2, [r4, #4]
 8012914:	42a3      	cmp	r3, r4
 8012916:	bf0c      	ite	eq
 8012918:	6032      	streq	r2, [r6, #0]
 801291a:	605a      	strne	r2, [r3, #4]
 801291c:	e7ec      	b.n	80128f8 <_malloc_r+0xa0>
 801291e:	4623      	mov	r3, r4
 8012920:	6864      	ldr	r4, [r4, #4]
 8012922:	e7b2      	b.n	801288a <_malloc_r+0x32>
 8012924:	4634      	mov	r4, r6
 8012926:	6876      	ldr	r6, [r6, #4]
 8012928:	e7b9      	b.n	801289e <_malloc_r+0x46>
 801292a:	230c      	movs	r3, #12
 801292c:	603b      	str	r3, [r7, #0]
 801292e:	4638      	mov	r0, r7
 8012930:	f000 f84c 	bl	80129cc <__malloc_unlock>
 8012934:	e7a1      	b.n	801287a <_malloc_r+0x22>
 8012936:	6025      	str	r5, [r4, #0]
 8012938:	e7de      	b.n	80128f8 <_malloc_r+0xa0>
 801293a:	bf00      	nop
 801293c:	200000d8 	.word	0x200000d8

08012940 <_realloc_r>:
 8012940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012944:	4680      	mov	r8, r0
 8012946:	4614      	mov	r4, r2
 8012948:	460e      	mov	r6, r1
 801294a:	b921      	cbnz	r1, 8012956 <_realloc_r+0x16>
 801294c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012950:	4611      	mov	r1, r2
 8012952:	f7ff bf81 	b.w	8012858 <_malloc_r>
 8012956:	b92a      	cbnz	r2, 8012964 <_realloc_r+0x24>
 8012958:	f7ff ff14 	bl	8012784 <_free_r>
 801295c:	4625      	mov	r5, r4
 801295e:	4628      	mov	r0, r5
 8012960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012964:	f000 f838 	bl	80129d8 <_malloc_usable_size_r>
 8012968:	4284      	cmp	r4, r0
 801296a:	4607      	mov	r7, r0
 801296c:	d802      	bhi.n	8012974 <_realloc_r+0x34>
 801296e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012972:	d812      	bhi.n	801299a <_realloc_r+0x5a>
 8012974:	4621      	mov	r1, r4
 8012976:	4640      	mov	r0, r8
 8012978:	f7ff ff6e 	bl	8012858 <_malloc_r>
 801297c:	4605      	mov	r5, r0
 801297e:	2800      	cmp	r0, #0
 8012980:	d0ed      	beq.n	801295e <_realloc_r+0x1e>
 8012982:	42bc      	cmp	r4, r7
 8012984:	4622      	mov	r2, r4
 8012986:	4631      	mov	r1, r6
 8012988:	bf28      	it	cs
 801298a:	463a      	movcs	r2, r7
 801298c:	f7ff fed2 	bl	8012734 <memcpy>
 8012990:	4631      	mov	r1, r6
 8012992:	4640      	mov	r0, r8
 8012994:	f7ff fef6 	bl	8012784 <_free_r>
 8012998:	e7e1      	b.n	801295e <_realloc_r+0x1e>
 801299a:	4635      	mov	r5, r6
 801299c:	e7df      	b.n	801295e <_realloc_r+0x1e>
	...

080129a0 <_sbrk_r>:
 80129a0:	b538      	push	{r3, r4, r5, lr}
 80129a2:	4d06      	ldr	r5, [pc, #24]	; (80129bc <_sbrk_r+0x1c>)
 80129a4:	2300      	movs	r3, #0
 80129a6:	4604      	mov	r4, r0
 80129a8:	4608      	mov	r0, r1
 80129aa:	602b      	str	r3, [r5, #0]
 80129ac:	f7fd ffca 	bl	8010944 <_sbrk>
 80129b0:	1c43      	adds	r3, r0, #1
 80129b2:	d102      	bne.n	80129ba <_sbrk_r+0x1a>
 80129b4:	682b      	ldr	r3, [r5, #0]
 80129b6:	b103      	cbz	r3, 80129ba <_sbrk_r+0x1a>
 80129b8:	6023      	str	r3, [r4, #0]
 80129ba:	bd38      	pop	{r3, r4, r5, pc}
 80129bc:	200000e0 	.word	0x200000e0

080129c0 <__malloc_lock>:
 80129c0:	4801      	ldr	r0, [pc, #4]	; (80129c8 <__malloc_lock+0x8>)
 80129c2:	f000 b811 	b.w	80129e8 <__retarget_lock_acquire_recursive>
 80129c6:	bf00      	nop
 80129c8:	200000e4 	.word	0x200000e4

080129cc <__malloc_unlock>:
 80129cc:	4801      	ldr	r0, [pc, #4]	; (80129d4 <__malloc_unlock+0x8>)
 80129ce:	f000 b80c 	b.w	80129ea <__retarget_lock_release_recursive>
 80129d2:	bf00      	nop
 80129d4:	200000e4 	.word	0x200000e4

080129d8 <_malloc_usable_size_r>:
 80129d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129dc:	1f18      	subs	r0, r3, #4
 80129de:	2b00      	cmp	r3, #0
 80129e0:	bfbc      	itt	lt
 80129e2:	580b      	ldrlt	r3, [r1, r0]
 80129e4:	18c0      	addlt	r0, r0, r3
 80129e6:	4770      	bx	lr

080129e8 <__retarget_lock_acquire_recursive>:
 80129e8:	4770      	bx	lr

080129ea <__retarget_lock_release_recursive>:
 80129ea:	4770      	bx	lr

080129ec <_init>:
 80129ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ee:	bf00      	nop
 80129f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129f2:	bc08      	pop	{r3}
 80129f4:	469e      	mov	lr, r3
 80129f6:	4770      	bx	lr

080129f8 <_fini>:
 80129f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129fa:	bf00      	nop
 80129fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129fe:	bc08      	pop	{r3}
 8012a00:	469e      	mov	lr, r3
 8012a02:	4770      	bx	lr
